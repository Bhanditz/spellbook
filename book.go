// this file has been generated by github.com/fasterthanlime/wizardry
// from a set of magic rules. you probably don't want to edit it by hand

package spellbook

import (
  "fmt"
  "io"
  "encoding/binary"
  "github.com/fasterthanlime/wizardry/wizardry"
)

// silence import errors, if we don't use string/search etc.
var _ wizardry.StringTestFlags
var _ fmt.State
var l binary.ByteOrder=binary.LittleEndian
var b binary.ByteOrder=binary.BigEndian
var gt=wizardry.StringTest
var ht=wizardry.SearchTest
var t=true
var f=false
var tb=make([]byte, 8)

// reads an unsigned 8-bit little-endian integer
func f1l(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<1||err!=nil {return 0,f}
  return uint64(tb[0]),t
}

// reads an unsigned 8-bit big-endian integer
func f1b(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<1||err!=nil {return 0,f}
  return uint64(tb[0]),t
}

// reads an unsigned 16-bit little-endian integer
func f2l(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<2||err!=nil {return 0,f}
  return uint64(l.Uint16(tb)),t
}

// reads an unsigned 16-bit big-endian integer
func f2b(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<2||err!=nil {return 0,f}
  return uint64(b.Uint16(tb)),t
}

// reads an unsigned 32-bit little-endian integer
func f4l(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<4||err!=nil {return 0,f}
  return uint64(l.Uint32(tb)),t
}

// reads an unsigned 32-bit big-endian integer
func f4b(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<4||err!=nil {return 0,f}
  return uint64(b.Uint32(tb)),t
}

// reads an unsigned 64-bit little-endian integer
func f8l(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<8||err!=nil {return 0,f}
  return uint64(l.Uint64(tb)),t
}

// reads an unsigned 64-bit big-endian integer
func f8b(r io.ReaderAt, s int64, off int64) (uint64, bool) {
  n,err:=r.ReadAt(tb,int64(off))
  if n<8||err!=nil {return 0,f}
  return uint64(b.Uint64(tb)),t
}

func Identify(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f4b(r,s,po)
  if !(m&&rc==3405691582) {goto f0}
  rc,m=f4b(r,s,po+4)
  if !(m&&int64(int32(rc))>30) {goto f1}
  a("compiled Java class data,")
  a("version %d.")
  a("\\b%d")
  rc,m=f4b(r,s,po+4)
  switch rc {
    case 46: a("(Java 1.2)")
    case 47: a("(Java 1.3)")
    case 48: a("(Java 1.4)")
    case 49: a("(Java 1.5)")
    case 50: a("(Java 1.6)")
    default: {goto f4}
  }
f4:
f1:
f0:
  rc,m=f4b(r,s,po)
  if !(m&&rc==3405697037) {goto f9}
  a("JAR compressed with pack200,")
  a("version %d.")
  a("\\b%d")
f9:
  rc,m=f4b(r,s,po)
  if !(m&&rc==3405697037) {goto fc}
  a("JAR compressed with pack200,")
  a("version %d.")
  a("\\b%d")
fc:
  rc,m=f4b(r,s,po)
  if !(m&&rc==3405691582) {goto ff}
  rc,m=f4b(r,s,po+4)
  if !(m&&rc==1) {goto f10}
  a("Mach-O universal binary with 1 architecture:")
  a(IdentifyMachO(r,s,po+8)...)
  a("\\b")
f10:
  if !(m&&int64(int32(rc))>1) {goto f12}
  if !(m&&int64(int32(rc))< 20) {goto f13}
  a("Mach-O universal binary with %ld architectures:")
  a(IdentifyMachO(r,s,po+8)...)
  a("\\b")
  a(IdentifyMachO(r,s,po+28)...)
  a("\\b")
f13:
  if !(m&&int64(int32(rc))>2) {goto f16}
  a(IdentifyMachO(r,s,po+48)...)
  a("\\b")
f16:
  if !(m&&int64(int32(rc))>3) {goto f18}
  a(IdentifyMachO(r,s,po+68)...)
  a("\\b")
f18:
f12:
ff:
  rA = gt(r,s,po,"#! /bin/sh",18)
  if rA<0 {goto f1a}
  a("POSIX shell script text executable")
f1a:
  rA = gt(r,s,po,"#! /bin/sh",34)
  if rA<0 {goto f1b}
  a("POSIX shell script executable (binary data)")
f1b:
  rA = gt(r,s,po,"#! /bin/csh",18)
  if rA<0 {goto f1c}
  a("C shell script text executable")
f1c:
  rA = gt(r,s,po,"#! /bin/ksh",18)
  if rA<0 {goto f1d}
  a("Korn shell script text executable")
f1d:
  rA = gt(r,s,po,"#! /bin/ksh",34)
  if rA<0 {goto f1e}
  a("Korn shell script executable (binary data)")
f1e:
  rA = gt(r,s,po,"#! /bin/tcsh",18)
  if rA<0 {goto f1f}
  a("Tenex C shell script text executable")
f1f:
  rA = gt(r,s,po,"#! /usr/bin/tcsh",18)
  if rA<0 {goto f20}
  a("Tenex C shell script text executable")
f20:
  rA = gt(r,s,po,"#! /usr/local/tcsh",18)
  if rA<0 {goto f21}
  a("Tenex C shell script text executable")
f21:
  rA = gt(r,s,po,"#! /usr/local/bin/tcsh",18)
  if rA<0 {goto f22}
  a("Tenex C shell script text executable")
f22:
  rA = gt(r,s,po,"#! /bin/zsh",18)
  if rA<0 {goto f23}
  a("Paul Falstad's zsh script text executable")
f23:
  rA = gt(r,s,po,"#! /usr/bin/zsh",18)
  if rA<0 {goto f24}
  a("Paul Falstad's zsh script text executable")
f24:
  rA = gt(r,s,po,"#! /usr/local/bin/zsh",18)
  if rA<0 {goto f25}
  a("Paul Falstad's zsh script text executable")
f25:
  rA = gt(r,s,po,"#! /usr/local/bin/ash",18)
  if rA<0 {goto f26}
  a("Neil Brown's ash script text executable")
f26:
  rA = gt(r,s,po,"#! /usr/local/bin/ae",18)
  if rA<0 {goto f27}
  a("Neil Brown's ae script text executable")
f27:
  rA = gt(r,s,po,"#! /bin/nawk",18)
  if rA<0 {goto f28}
  a("new awk script text executable")
f28:
  rA = gt(r,s,po,"#! /usr/bin/nawk",18)
  if rA<0 {goto f29}
  a("new awk script text executable")
f29:
  rA = gt(r,s,po,"#! /usr/local/bin/nawk",18)
  if rA<0 {goto f2a}
  a("new awk script text executable")
f2a:
  rA = gt(r,s,po,"#! /bin/gawk",18)
  if rA<0 {goto f2b}
  a("GNU awk script text executable")
f2b:
  rA = gt(r,s,po,"#! /usr/bin/gawk",18)
  if rA<0 {goto f2c}
  a("GNU awk script text executable")
f2c:
  rA = gt(r,s,po,"#! /usr/local/bin/gawk",18)
  if rA<0 {goto f2d}
  a("GNU awk script text executable")
f2d:
  rA = gt(r,s,po,"#! /bin/awk",18)
  if rA<0 {goto f2e}
  a("awk script text executable")
f2e:
  rA = gt(r,s,po,"#! /usr/bin/awk",18)
  if rA<0 {goto f2f}
  a("awk script text executable")
f2f:
  rA = gt(r,s,po,"#! /bin/rc",18)
  if rA<0 {goto f30}
  a("Plan 9 rc shell script text executable")
f30:
  rA = gt(r,s,po,"#! /bin/bash",18)
  if rA<0 {goto f31}
  a("Bourne-Again shell script text executable")
f31:
  rA = gt(r,s,po,"#! /bin/bash",34)
  if rA<0 {goto f32}
  a("Bourne-Again shell script executable (binary data)")
f32:
  rA = gt(r,s,po,"#! /usr/bin/bash",18)
  if rA<0 {goto f33}
  a("Bourne-Again shell script text executable")
f33:
  rA = gt(r,s,po,"#! /usr/bin/bash",34)
  if rA<0 {goto f34}
  a("Bourne-Again shell script executable (binary data)")
f34:
  rA = gt(r,s,po,"#! /usr/local/bash",18)
  if rA<0 {goto f35}
  a("Bourne-Again shell script text executable")
f35:
  rA = gt(r,s,po,"#! /usr/local/bash",34)
  if rA<0 {goto f36}
  a("Bourne-Again shell script executable (binary data)")
f36:
  rA = gt(r,s,po,"#! /usr/local/bin/bash",18)
  if rA<0 {goto f37}
  a("Bourne-Again shell script text executable")
f37:
  rA = gt(r,s,po,"#! /usr/local/bin/bash",34)
  if rA<0 {goto f38}
  a("Bourne-Again shell script executable (binary data)")
f38:
  rA=ht(r,s,po,1,"=<?php")
  if rA<0 {goto f39}
  a("PHP script text")
f39:
  rA=ht(r,s,po,1,"=<?\n")
  if rA<0 {goto f3a}
  a("PHP script text")
f3a:
  rA=ht(r,s,po,1,"=<?\r")
  if rA<0 {goto f3b}
  a("PHP script text")
f3b:
  rA=ht(r,s,po,1,"#! /usr/local/bin/php")
  if rA<0 {goto f3c}
  a("PHP script text executable")
f3c:
  rA=ht(r,s,po,1,"#! /usr/bin/php")
  if rA<0 {goto f3d}
  a("PHP script text executable")
f3d:
  rA = gt(r,s,po,"=<?php /* Smarty version",0)
  if rA<0 {goto f3e}
  a("Smarty compiled template")
f3e:
  rA = gt(r,s,po,"Zend\x00",0)
  if rA<0 {goto f3f}
  a("PHP script Zend Optimizer data")
f3f:
  rA = gt(r,s,po,"$!",16)
  if rA<0 {goto f40}
  a("DCL command file")
f40:
  rA = gt(r,s,po,"#!/usr/bin/pdmenu",0)
  if rA<0 {goto f41}
  a("Pdmenu configuration file text")
f41:
  rA = gt(r,s,po,"\u007fELF",0)
  if rA<0 {goto f42}
  a("ELF")
  rc,m=f1l(r,s,po+4)
  switch rc {
    case 0: a("invalid class")
    case 1: a("32-bit")
    case 2: a("64-bit")
    default: {goto f43}
  }
f43:
  rc,m=f1l(r,s,po+5)
  if !(m&&rc==0) {goto f46}
  a("invalid byte order")
f46:
  if !(m&&rc==1) {goto f47}
  a("LSB")
  a(IdentifyElfLe(r,s,po)...)
f47:
  if !(m&&rc==2) {goto f49}
  a("MSB")
  a(IdentifyElfLe__Swapped(r,s,po)...)
f49:
  rc,m=f1l(r,s,po+4)
  if !(m&&int64(int8(rc))< 128) {goto f4b}
  rA = gt(r,s,po+8,">\x00",0)
  if rA<0 {goto f4c}
  a("(%s)")
f4c:
f4b:
  rA = gt(r,s,po+8,"\x00",0)
  if rA<0 {goto f4d}
  rc,m=f1l(r,s,po+7)
  switch rc {
    case 0: a("(SYSV)")
    case 1: a("(HP-UX)")
    case 2: a("(NetBSD)")
    case 3: a("(GNU/Linux)")
    case 4: a("(GNU/Hurd)")
    case 5: a("(86Open)")
    case 6: a("(Solaris)")
    case 7: a("(Monterey)")
    case 8: a("(IRIX)")
    case 9: a("(FreeBSD)")
    case 10: a("(Tru64)")
    case 11: a("(Novell Modesto)")
    case 12: a("(OpenBSD)")
    default: {goto f4e}
  }
f4e:
f4d:
  rA = gt(r,s,po+8,"\x02",0)
  if rA<0 {goto f5b}
  rc,m=f1l(r,s,po+7)
  switch rc {
    case 13: a("(OpenVMS)")
    case 97: a("(ARM)")
    case 255: a("(embedded)")
    default: {goto f5c}
  }
f5c:
f5b:
f42:
  rc,m=f4l(r,s,po)
  if !(m&&rc&4294967294==4277009102) {goto f5f}
  a("Mach-O")
  a(IdentifyMachOBe__Swapped(r,s,po)...)
f5f:
  rc,m=f4b(r,s,po)
  if !(m&&rc&4294967294==4277009102) {goto f61}
  a("Mach-O")
  a(IdentifyMachOBe(r,s,po)...)
f61:
  rA = gt(r,s,po,"@",16)
  if rA<0 {goto f63}
  rA = gt(r,s,po+1," echo off",5)
  if rA<0 {goto f64}
  a("DOS batch file text")
f64:
  rA = gt(r,s,po+1,"echo off",5)
  if rA<0 {goto f65}
  a("DOS batch file text")
f65:
  rA = gt(r,s,po+1,"rem",5)
  if rA<0 {goto f66}
  a("DOS batch file text")
f66:
  rA = gt(r,s,po+1,"set ",5)
  if rA<0 {goto f67}
  a("DOS batch file text")
f67:
f63:
  rA=ht(r,s,po+100,65535,"rxfuncadd")
  if rA<0 {goto f68}
f68:
  rA=ht(r,s,po+100,65535,"say")
  if rA<0 {goto f69}
f69:
  rc,m=f2l(r,s,po)
  if !(m&&rc==358) {goto f6a}
  a("MS Windows COFF MIPS R4000 object file")
f6a:
  rc,m=f2l(r,s,po)
  if !(m&&rc==388) {goto f6b}
  a("MS Windows COFF Alpha object file")
f6b:
  rc,m=f2l(r,s,po)
  if !(m&&rc==616) {goto f6c}
  a("MS Windows COFF Motorola 68000 object file")
f6c:
  rc,m=f2l(r,s,po)
  if !(m&&rc==496) {goto f6d}
  a("MS Windows COFF PowerPC object file")
f6d:
  rc,m=f2l(r,s,po)
  if !(m&&rc==656) {goto f6e}
  a("MS Windows COFF PA-RISC object file")
f6e:
  rA = gt(r,s,po,"MZ",32)
  if rA<0 {goto f6f}
  rc,m=f2l(r,s,po+24)
  if !(m&&int64(int16(rc))< 64) {goto f70}
  a("MS-DOS executable")
f70:
  if !(m&&int64(int16(rc))>63) {goto f71}
  ra,k=f4l(r,s,60)
  if !k {goto f72}
  rA = gt(r,s,int64(ra),"PE\x00\x00",0)
  if rA<0 {goto f72}
  gf=int64(ra)+rA
  a("PE")
  d[2]=f
  ra,k=f4l(r,s,60)
  if !k {goto f73}
  rc,m=f2l(r,s,int64(ra)+24)
  switch rc {
    case 267: a("\\b32 executable")
    case 523: a("\\b32+ executable")
    case 263: a("ROM image")
    default: {goto f73}
  }
  d[2]=t
f73:
  if !k {goto f76}
  if d[2] {goto f76}
  gf=int64(ra)+24
  a("Unknown PE signature")
  a("0x%x")
  d[2]=t
f76:
  ra,k=f4l(r,s,60)
  if !k {goto f78}
  rc,m=f2l(r,s,int64(ra)+22)
  if !(m&&int64(int16(rc))&8192>0) {goto f78}
  a("(DLL)")
  d[2]=t
f78:
  ra,k=f4l(r,s,60)
  if !k {goto f79}
  rc,m=f2l(r,s,int64(ra)+92)
  switch rc {
    case 1: a("(native)")
    case 2: a("(GUI)")
    case 3: a("(console)")
    case 7: a("(POSIX)")
    case 9: a("(Windows CE)")
    case 10: a("(EFI application)")
    case 11: a("(EFI boot service driver)")
    case 12: a("(EFI runtime driver)")
    case 13: a("(EFI ROM)")
    case 14: a("(XBOX)")
    case 15: a("(Windows boot application)")
    default: {goto f79}
  }
  d[2]=t
f79:
  if !k {goto f84}
  if d[2] {goto f84}
  gf=int64(ra)+92
  a("(Unknown subsystem")
  a("0x%x)")
  d[2]=t
f84:
  ra,k=f4l(r,s,60)
  if !k {goto f86}
  rc,m=f2l(r,s,int64(ra)+4)
  switch rc {
    case 332: a("Intel 80386")
    case 358: a("MIPS R4000")
    case 360: a("MIPS R10000")
    case 388: a("Alpha")
    case 418: a("Hitachi SH3")
    case 422: a("Hitachi SH4")
    case 448: a("ARM")
    case 450: a("ARM Thumb")
    case 452: a("ARMv7 Thumb")
    case 496: a("PowerPC")
    case 512: a("Intel Itanium")
    case 614: a("MIPS16")
    case 616: a("Motorola 68000")
    case 656: a("PA-RISC")
    case 870: a("MIPSIV")
    case 1126: a("MIPS16 with FPU")
    case 3772: a("EFI byte code")
    case 34404: a("x86-64")
    case 49390: a("MSIL")
    default: {goto f86}
  }
  d[2]=t
f86:
  if !k {goto f99}
  if d[2] {goto f99}
  gf=int64(ra)+4
  a("Unknown processor type")
  a("0x%x")
  d[2]=t
f99:
  ra,k=f4l(r,s,60)
  if !k {goto f9b}
  rc,m=f2l(r,s,int64(ra)+22)
  if !(m&&int64(int16(rc))&512>0) {goto f9b}
  a("(stripped to external PDB)")
  d[2]=t
f9b:
  if !k {goto f9c}
  if !(m&&int64(int16(rc))&4096>0) {goto f9c}
  a("system file")
  d[2]=t
f9c:
  ra,k=f4l(r,s,60)
  if !k {goto f9d}
  rc,m=f2l(r,s,int64(ra)+24)
  if !(m&&rc==267) {goto f9d}
  ra,k=f4l(r,s,60)
  if !k {goto f9e}
  rc,m=f4l(r,s,int64(ra)+232)
  if !(m&&int64(int32(rc))>0) {goto f9e}
  a("Mono/.Net assembly")
f9e:
  d[2]=t
f9d:
  if !k {goto f9f}
  if !(m&&rc==523) {goto f9f}
  ra,k=f4l(r,s,60)
  if !k {goto fa0}
  rc,m=f4l(r,s,int64(ra)+248)
  if !(m&&int64(int32(rc))>0) {goto fa0}
  a("Mono/.Net assembly")
fa0:
  d[2]=t
f9f:
  ra,k=f2l(r,s,8)
  if !k {goto fa1}
  rA = gt(r,s,int64(ra)*16,"32STUB",0)
  if rA<0 {goto fa1}
  a("\\b, 32rtm DOS extender")
  d[2]=t
fa1:
  if !k {goto fa2}
  rA = gt(r,s,int64(ra)*16,"32STUB",0)
  if rA>=0 {goto fa2}
  a("\\b, for MS Windows")
  d[2]=t
fa2:
  ra,k=f4l(r,s,60)
  if !k {goto fa3}
  rA = gt(r,s,int64(ra)+248,"UPX0",0)
  if rA<0 {goto fa3}
  a("\\b, UPX compressed")
  d[2]=t
fa3:
  if !k {goto fa4}
  rA=ht(r,s,int64(ra)+248,320,"PEC2")
  if rA<0 {goto fa4}
  a("\\b, PECompact2 compressed")
  d[2]=t
fa4:
  if !k {goto fa5}
  rA=ht(r,s,int64(ra)+248,320,"UPX2")
  if rA<0 {goto fa5}
  gf=int64(ra)+248+rA+4
  ra,k=f4l(r,s,16+gf)
  if !k {goto fa6}
  rb,l=f4l(r,s,16+gf + -4)
  if !l {goto fa6}
  rA = gt(r,s,int64(ra)+int64(rb),"PK\x03\x04",0)
  if rA<0 {goto fa6}
  a("\\b, ZIP self-extracting archive (Info-Zip)")
fa6:
  d[2]=t
fa5:
  if !k {goto fa7}
  rA=ht(r,s,int64(ra)+248,320,".idata")
  if rA<0 {goto fa7}
  gf=int64(ra)+248+rA+6
  ra,k=f4l(r,s,14+gf)
  if !k {goto fa8}
  rb,l=f4l(r,s,14+gf + -4)
  if !l {goto fa8}
  rA = gt(r,s,int64(ra)+int64(rb),"PK\x03\x04",0)
  if rA<0 {goto fa8}
  a("\\b, ZIP self-extracting archive (Info-Zip)")
fa8:
  if !k {goto fa9}
  rb,l=f4l(r,s,14+gf + -4)
  if !l {goto fa9}
  rA = gt(r,s,int64(ra)+int64(rb),"ZZ0",0)
  if rA<0 {goto fa9}
  a("\\b, ZZip self-extracting archive")
fa9:
  if !k {goto faa}
  rb,l=f4l(r,s,14+gf + -4)
  if !l {goto faa}
  rA = gt(r,s,int64(ra)+int64(rb),"ZZ1",0)
  if rA<0 {goto faa}
  a("\\b, ZZip self-extracting archive")
faa:
  d[2]=t
fa7:
  if !k {goto fab}
  rA=ht(r,s,int64(ra)+248,320,".rsrc")
  if rA<0 {goto fab}
  gf=int64(ra)+248+rA+5
  ra,k=f4l(r,s,15+gf)
  if !k {goto fac}
  rb,l=f4l(r,s,15+gf + -4)
  if !l {goto fac}
  rA = gt(r,s,int64(ra)+int64(rb),"a\\\x04\x05",0)
  if rA<0 {goto fac}
  a("\\b, WinHKI self-extracting archive")
fac:
  if !k {goto fad}
  rb,l=f4l(r,s,15+gf + -4)
  if !l {goto fad}
  rA = gt(r,s,int64(ra)+int64(rb),"Rar!",0)
  if rA<0 {goto fad}
  a("\\b, RAR self-extracting archive")
fad:
  if !k {goto fae}
  rb,l=f4l(r,s,15+gf + -4)
  if !l {goto fae}
  rA=ht(r,s,int64(ra)+int64(rb),12288,"MSCF")
  if rA<0 {goto fae}
  a("\\b, InstallShield self-extracting archive")
fae:
  if !k {goto faf}
  rb,l=f4l(r,s,15+gf + -4)
  if !l {goto faf}
  rA=ht(r,s,int64(ra)+int64(rb),32,"Nullsoft")
  if rA<0 {goto faf}
  a("\\b, Nullsoft Installer self-extracting archive")
faf:
  d[2]=t
fab:
  if !k {goto fb0}
  rA=ht(r,s,int64(ra)+248,320,".data")
  if rA<0 {goto fb0}
  gf=int64(ra)+248+rA+5
  ra,k=f4l(r,s,15+gf)
  if !k {goto fb1}
  rA = gt(r,s,int64(ra),"WEXTRACT",0)
  if rA<0 {goto fb1}
  a("\\b, MS CAB-Installer self-extracting archive")
fb1:
  d[2]=t
fb0:
  if !k {goto fb2}
  rA=ht(r,s,int64(ra)+248,320,".petite\x00")
  if rA<0 {goto fb2}
  a("\\b, Petite compressed")
  ra,k=f4l(r,s,60)
  if !k {goto fb3}
  gf=int64(ra)+248
  ra,k=f4l(r,s,260+gf)
  if !k {goto fb4}
  rb,l=f4l(r,s,260+gf + -4)
  if !l {goto fb4}
  rA = gt(r,s,int64(ra)+int64(rb),"=!sfx!",0)
  if rA<0 {goto fb4}
  a("\\b, ACE self-extracting archive")
fb4:
fb3:
  d[2]=t
fb2:
  if !k {goto fb5}
  rA=ht(r,s,int64(ra)+248,320,".WISE")
  if rA<0 {goto fb5}
  a("\\b, WISE installer self-extracting archive")
  d[2]=t
fb5:
  if !k {goto fb6}
  rA=ht(r,s,int64(ra)+248,320,".dz\x00\x00\x00")
  if rA<0 {goto fb6}
  a("\\b, Dzip self-extracting archive")
  d[2]=t
fb6:
  ra,k=f4l(r,s,60)
  if !k {goto fb7}
  rA=ht(r,s,int64(ra)+248+gf,256,"_winzip_")
  if rA<0 {goto fb7}
  a("\\b, ZIP self-extracting archive (WinZip)")
  d[2]=t
fb7:
  if !k {goto fb8}
  rA=ht(r,s,int64(ra)+248+gf,256,"SharedD")
  if rA<0 {goto fb8}
  a("\\b, Microsoft Installer self-extracting archive")
  d[2]=t
fb8:
  rA = gt(r,s,po+48,"Inno",0)
  if rA<0 {goto fb9}
  a("\\b, InnoSetup self-extracting archive")
  d[2]=t
fb9:
  rA=ht(r,s,po,61440,"Inno Setup Setup Data")
  if rA<0 {goto fba}
  a("\\b, InnoSetup installer")
  d[2]=t
fba:
f72:
  if !k {goto fbb}
  rA = gt(r,s,int64(ra),"PE\x00\x00",0)
  if rA>=0 {goto fbb}
  a("MS-DOS executable")
fbb:
  if !k {goto fbc}
  rA = gt(r,s,int64(ra),"NE",0)
  if rA<0 {goto fbc}
  gf=int64(ra)+rA
  a("\\b, NE")
  d[2]=f
  ra,k=f4l(r,s,60)
  if !k {goto fbd}
  rc,m=f1l(r,s,int64(ra)+54)
  switch rc {
    case 1: a("for OS/2 1.x")
    case 2: a("for MS Windows 3.x")
    case 3: a("for MS-DOS")
    case 4: a("for Windows 386")
    case 5: a("for Borland Operating System Services")
    default: {goto fbd}
  }
  d[2]=t
fbd:
  if !k {goto fc2}
  if d[2] {goto fc2}
  if !k {goto fc3}
  a("(unknown OS %x)")
fc3:
  d[2]=t
fc2:
  if !k {goto fc4}
  rc,m=f1l(r,s,int64(ra)+54)
  if !(m&&rc==129) {goto fc4}
  a("for MS-DOS, Phar Lap DOS extender")
  d[2]=t
fc4:
  ra,k=f4l(r,s,60)
  if !k {goto fc5}
  rc,m=f2l(r,s,int64(ra)+12)
  if !(m&&rc&32771==32770) {goto fc5}
  a("(DLL)")
  d[2]=t
fc5:
  if !k {goto fc6}
  if !(m&&rc&32771==32769) {goto fc6}
  a("(driver)")
  d[2]=t
fc6:
  ra,k=f2l(r,s,36+gf)
  if !k {goto fc7}
  rA = gt(r,s,int64(ra)-1+gf,"ARJSFX",0)
  if rA<0 {goto fc7}
  a("\\b, ARJ self-extracting archive")
  d[2]=t
fc7:
  ra,k=f4l(r,s,60)
  if !k {goto fc8}
  rA=ht(r,s,int64(ra)+112,128,"WinZip(R) Self-Extractor")
  if rA<0 {goto fc8}
  a("\\b, ZIP self-extracting archive (WinZip)")
  d[2]=t
fc8:
fbc:
  if !k {goto fc9}
  rA = gt(r,s,int64(ra),"LX\x00\x00",0)
  if rA<0 {goto fc9}
  gf=int64(ra)+rA
  a("\\b, LX")
  ra,k=f4l(r,s,60)
  if !k {goto fca}
  rc,m=f2l(r,s,int64(ra)+10)
  if !(m&&int64(int16(rc))< 1) {goto fca}
  a("(unknown OS)")
fca:
  if !k {goto fcb}
  rc,m=f2l(r,s,int64(ra)+10)
  switch rc {
    case 1: a("for OS/2")
    case 2: a("for MS Windows")
    case 3: a("for DOS")
    default: {goto fcb}
  }
fcb:
  if !k {goto fce}
  rc,m=f2l(r,s,int64(ra)+10)
  if !(m&&int64(int16(rc))>3) {goto fce}
  a("(unknown OS)")
fce:
  ra,k=f4l(r,s,60)
  if !k {goto fcf}
  rc,m=f4l(r,s,int64(ra)+16)
  if !(m&&rc&163840==32768) {goto fcf}
  a("(DLL)")
fcf:
  if !k {goto fd0}
  if !(m&&int64(int32(rc))&131072>0) {goto fd0}
  a("(device driver)")
fd0:
  if !k {goto fd1}
  if !(m&&rc&768==768) {goto fd1}
  a("(GUI)")
fd1:
  if !k {goto fd2}
  if !(m&&int64(int32(rc))&164608< 768) {goto fd2}
  a("(console)")
fd2:
  ra,k=f4l(r,s,60)
  if !k {goto fd3}
  rc,m=f2l(r,s,int64(ra)+8)
  switch rc {
    case 1: a("i80286")
    case 2: a("i80386")
    case 3: a("i80486")
    default: {goto fd3}
  }
fd3:
  ra,k=f2l(r,s,8)
  if !k {goto fd6}
  rA = gt(r,s,int64(ra)*16,"emx",0)
  if rA<0 {goto fd6}
  gf=int64(ra)*16+rA
  a("\\b, emx")
  rA = gt(r,s,po+1+gf,"x",0)
  if rA<0 {goto fd7}
  a("%s")
fd7:
fd6:
  ra,k=f4l(r,s,84+gf)
  if !k {goto fd8}
  rA = gt(r,s,int64(ra)-3+gf,"arjsfx",0)
  if rA<0 {goto fd8}
  a("\\b, ARJ self-extracting archive")
fd8:
fc9:
  if !k {goto fd9}
  rA = gt(r,s,int64(ra),"W3",0)
  if rA<0 {goto fd9}
  a("\\b, W3 for MS Windows")
fd9:
  if !k {goto fda}
  rA = gt(r,s,int64(ra),"LE\x00\x00",0)
  if rA<0 {goto fda}
  gf=int64(ra)+rA
  a("\\b, LE executable")
  ra,k=f4l(r,s,60)
  if !k {goto fdb}
  rc,m=f2l(r,s,int64(ra)+10)
  if !(m&&rc==1) {goto fdb}
  gf=int64(ra)+12
  rA=ht(r,s,po+576,256,"DOS/4G")
  if rA<0 {goto fdc}
  a("for MS-DOS, DOS4GW DOS extender")
fdc:
  rA=ht(r,s,po+576,512,"WATCOM C/C++")
  if rA<0 {goto fdd}
  a("for MS-DOS, DOS4GW DOS extender")
fdd:
  rA=ht(r,s,po+1088,256,"CauseWay DOS Extender")
  if rA<0 {goto fde}
  a("for MS-DOS, CauseWay DOS extender")
fde:
  rA=ht(r,s,po+64,64,"PMODE/W")
  if rA<0 {goto fdf}
  a("for MS-DOS, PMODE/W DOS extender")
fdf:
  rA=ht(r,s,po+64,64,"STUB/32A")
  if rA<0 {goto fe0}
  a("for MS-DOS, DOS/32A DOS extender (stub)")
fe0:
  rA=ht(r,s,po+64,128,"STUB/32C")
  if rA<0 {goto fe1}
  a("for MS-DOS, DOS/32A DOS extender (configurable stub)")
fe1:
  rA=ht(r,s,po+64,128,"DOS/32A")
  if rA<0 {goto fe2}
  a("for MS-DOS, DOS/32A DOS extender (embedded)")
fe2:
  rc,m=f4l(r,s,po+36+gf)
  if !(m&&int64(int32(rc))< 80) {goto fe3}
  gf=po+36+gf+4
  ra,k=f4l(r,s,76+gf)
  if !k {goto fe4}
  rA = gt(r,s,int64(ra),"\xfc\xb8WATCOM",0)
  if rA<0 {goto fe4}
  gf=int64(ra)+rA
  rA=ht(r,s,po+gf,8,"3\xdbf\xb9")
  if rA<0 {goto fe5}
  a("\\b, 32Lite compressed")
fe5:
fe4:
fe3:
fdb:
  if !k {goto fe6}
  rc,m=f2l(r,s,int64(ra)+10)
  switch rc {
    case 2: a("for MS Windows")
    case 3: a("for DOS")
    case 4: a("for MS Windows (VxD)")
    default: {goto fe6}
  }
fe6:
  ra,k=f4l(r,s,124+gf)
  if !k {goto fe9}
  rA = gt(r,s,int64(ra)+38,"UPX",0)
  if rA<0 {goto fe9}
  a("\\b, UPX compressed")
fe9:
  ra,k=f4l(r,s,84+gf)
  if !k {goto fea}
  rA = gt(r,s,int64(ra)-3+gf,"UNACE",0)
  if rA<0 {goto fea}
  a("\\b, ACE self-extracting archive")
fea:
fda:
  rc,m=f4l(r,s,po+60)
  if !(m&&int64(int32(rc))>536870912) {goto feb}
  ra,k=f2l(r,s,4)
  if !k {goto fec}
  rc,m=f2l(r,s,int64(ra)*512)
  if !(m&&rc!=332) {goto fec}
  a("\\b, MZ for MS-DOS")
fec:
feb:
f71:
  rc,m=f4l(r,s,po+2)
  if !(m&&rc!=0) {goto fed}
  rc,m=f2l(r,s,po+24)
  if !(m&&int64(int16(rc))< 64) {goto fee}
  ra,k=f2l(r,s,4)
  if !k {goto fef}
  rc,m=f2l(r,s,int64(ra)*512)
  if !(m&&rc!=332) {goto fef}
  gf=int64(ra)*512+2
  ra,k=f2l(r,s,2)
  if !k {goto ff0}
  rA = gt(r,s,int64(ra)-514+gf,"LE",0)
  if rA>=0 {goto ff0}
  gf=int64(ra)-514+gf+rA
  rA = gt(r,s,po+-2+gf,"BW",0)
  if rA>=0 {goto ff1}
  a("\\b, MZ for MS-DOS")
ff1:
ff0:
  if !k {goto ff2}
  rA = gt(r,s,int64(ra)-514+gf,"LE",0)
  if rA<0 {goto ff2}
  a("\\b, LE")
  rA=ht(r,s,po+576,256,"DOS/4G")
  if rA<0 {goto ff3}
  a("for MS-DOS, DOS4GW DOS extender")
ff3:
ff2:
  if !k {goto ff4}
  rA = gt(r,s,int64(ra)-514+gf,"BW",0)
  if rA<0 {goto ff4}
  rA=ht(r,s,po+576,256,"DOS/4G")
  if rA<0 {goto ff5}
  a("\\b, LE for MS-DOS, DOS4GW DOS extender (embedded)")
ff5:
  rA=ht(r,s,po+576,256,"!DOS/4G")
  if rA<0 {goto ff6}
  a("\\b, BW collection for MS-DOS")
ff6:
ff4:
fef:
fee:
fed:
  ra,k=f2l(r,s,4)
  if !k {goto ff7}
  rc,m=f2l(r,s,int64(ra)*512)
  if !(m&&rc==332) {goto ff7}
  gf=int64(ra)*512+2
  a("\\b, COFF")
  ra,k=f2l(r,s,8)
  if !k {goto ff8}
  rA = gt(r,s,int64(ra)*16,"go32stub",0)
  if rA<0 {goto ff8}
  a("for MS-DOS, DJGPP go32 DOS extender")
ff8:
  if !k {goto ff9}
  rA = gt(r,s,int64(ra)*16,"emx",0)
  if rA<0 {goto ff9}
  gf=int64(ra)*16+rA
  rA = gt(r,s,po+1+gf,"x",0)
  if rA<0 {goto ffa}
  a("for DOS, Win or OS/2, emx %s")
ffa:
ff9:
  ra,k=f4l(r,s,66+gf)
  if !k {goto ffb}
  gf=int64(ra)-3+gf+1
  rA = gt(r,s,po+38+gf,"UPX",0)
  if rA<0 {goto ffc}
  a("\\b, UPX compressed")
ffc:
ffb:
  rA=ht(r,s,po+44+gf,160,".text")
  if rA<0 {goto ffd}
  gf=po+44+gf+rA+5
  rc,m=f4l(r,s,po+11+gf)
  if !(m&&int64(int32(rc))< 8192) {goto ffe}
  gf=po+11+gf+4
  rc,m=f4l(r,s,po+gf)
  if !(m&&int64(int32(rc))>24576) {goto fff}
  a("\\b, 32lite compressed")
fff:
ffe:
ffd:
ff7:
  ra,k=f2l(r,s,8)
  if !k {goto f100}
  rA = gt(r,s,int64(ra)*16,"$WdX",0)
  if rA<0 {goto f100}
  a("\\b, WDos/X DOS extender")
f100:
  rA = gt(r,s,po+53,"\x8e\xc0\xb9\b\x00\xf3\xa5Ju\xeb\x8eÎ\xd83\xff\xbe0\x00\x05",0)
  if rA<0 {goto f101}
  a("\\b, aPack compressed")
f101:
  rA = gt(r,s,po+231,"LH/2 ",0)
  if rA<0 {goto f102}
  a("Self-Extract \\b, %s")
f102:
  rA = gt(r,s,po+28,"UC2X",0)
  if rA<0 {goto f103}
  a("\\b, UCEXE compressed")
f103:
  rA = gt(r,s,po+28,"WWP ",0)
  if rA<0 {goto f104}
  a("\\b, WWPACK compressed")
f104:
  rA = gt(r,s,po+28,"RJSX",0)
  if rA<0 {goto f105}
  a("\\b, ARJ self-extracting archive")
f105:
  rA = gt(r,s,po+28,"diet",0)
  if rA<0 {goto f106}
  a("\\b, diet compressed")
f106:
  rA = gt(r,s,po+28,"LZ09",0)
  if rA<0 {goto f107}
  a("\\b, LZEXE v0.90 compressed")
f107:
  rA = gt(r,s,po+28,"LZ91",0)
  if rA<0 {goto f108}
  a("\\b, LZEXE v0.91 compressed")
f108:
  rA = gt(r,s,po+28,"tz",0)
  if rA<0 {goto f109}
  a("\\b, TinyProg compressed")
f109:
  rA = gt(r,s,po+30,"Copyright 1989-1990 PKWARE Inc.",0)
  if rA<0 {goto f10a}
  a("Self-extracting PKZIP archive")
f10a:
  rA = gt(r,s,po+30,"PKLITE Copr.",0)
  if rA<0 {goto f10b}
  a("Self-extracting PKZIP archive")
f10b:
  rA=ht(r,s,po+32,224,"aRJsfX")
  if rA<0 {goto f10c}
  a("\\b, ARJ self-extracting archive")
f10c:
  rA = gt(r,s,po+32,"AIN",0)
  if rA<0 {goto f10d}
  rA = gt(r,s,po+35,"2",0)
  if rA<0 {goto f10e}
  a("\\b, AIN 2.x compressed")
f10e:
  rA = gt(r,s,po+35,"<2",0)
  if rA<0 {goto f10f}
  a("\\b, AIN 1.x compressed")
f10f:
  rA = gt(r,s,po+35,">2",0)
  if rA<0 {goto f110}
  a("\\b, AIN 1.x compressed")
f110:
f10d:
  rA = gt(r,s,po+36,"LHa's SFX",0)
  if rA<0 {goto f111}
  a("\\b, LHa self-extracting archive")
f111:
  rA = gt(r,s,po+36,"LHA's SFX",0)
  if rA<0 {goto f112}
  a("\\b, LHa self-extracting archive")
f112:
  rA = gt(r,s,po+36," $ARX",0)
  if rA<0 {goto f113}
  a("\\b, ARX self-extracting archive")
f113:
  rA = gt(r,s,po+36," $LHarc",0)
  if rA<0 {goto f114}
  a("\\b, LHarc self-extracting archive")
f114:
  rA = gt(r,s,po+32,"SFX by LARC",0)
  if rA<0 {goto f115}
  a("\\b, LARC self-extracting archive")
f115:
  rA = gt(r,s,po+64,"aPKG",0)
  if rA<0 {goto f116}
  a("\\b, aPackage self-extracting archive")
f116:
  rA = gt(r,s,po+100,"W Collis\x00\x00",0)
  if rA<0 {goto f117}
  a("\\b, Compack compressed")
f117:
  rA = gt(r,s,po+122,"Windows self-extracting ZIP",0)
  if rA<0 {goto f118}
  gf=po+122+rA
  a("\\b, ZIP self-extracting archive")
  rA=ht(r,s,po+244+gf,320,"\x00@\x01\x00")
  if rA<0 {goto f119}
  gf=po+244+gf+rA+4
  ra,k=f4l(r,s,0+gf)
  if !k {goto f11a}
  rb,l=f4l(r,s,0+gf + 4)
  if !l {goto f11a}
  rA = gt(r,s,int64(ra)+int64(rb),"MSCF",0)
  if rA<0 {goto f11a}
  a("\\b, WinHKI CAB self-extracting archive")
f11a:
f119:
f118:
  rA = gt(r,s,po+1638,"-lh5-",0)
  if rA<0 {goto f11b}
  a("\\b, LHa self-extracting archive v2.13S")
f11b:
  rA = gt(r,s,po+96392,"Rar!",0)
  if rA<0 {goto f11c}
  a("\\b, RAR self-extracting archive")
f11c:
  ra,k=f2l(r,s,4)
  if !k {goto f11d}
  gf=int64(ra)*512+4
  ra,k=f2l(r,s,2)
  if !k {goto f11e}
  gf=int64(ra)-517+gf+1
  rA = gt(r,s,po+gf,"PK\x03\x04",0)
  if rA<0 {goto f11f}
  a("\\b, ZIP self-extracting archive")
f11f:
  rA = gt(r,s,po+gf,"Rar!",0)
  if rA<0 {goto f120}
  a("\\b, RAR self-extracting archive")
f120:
  rA = gt(r,s,po+gf,"=!\x11",0)
  if rA<0 {goto f121}
  a("\\b, AIN 2.x self-extracting archive")
f121:
  rA = gt(r,s,po+gf,"=!\x12",0)
  if rA<0 {goto f122}
  a("\\b, AIN 2.x self-extracting archive")
f122:
  rA = gt(r,s,po+gf,"=!\x17",0)
  if rA<0 {goto f123}
  a("\\b, AIN 1.x self-extracting archive")
f123:
  rA = gt(r,s,po+gf,"=!\x18",0)
  if rA<0 {goto f124}
  a("\\b, AIN 1.x self-extracting archive")
f124:
  rA=ht(r,s,po+7+gf,400,"**ACE**")
  if rA<0 {goto f125}
  a("\\b, ACE self-extracting archive")
f125:
  rA=ht(r,s,po+gf,1152,"UC2SFX Header")
  if rA<0 {goto f126}
  a("\\b, UC2 self-extracting archive")
f126:
f11e:
f11d:
  ra,k=f2l(r,s,8)
  if !k {goto f127}
  rA=ht(r,s,int64(ra)*16,32,"PKSFX")
  if rA<0 {goto f127}
  a("\\b, ZIP self-extracting archive (PKZIP)")
f127:
  rA = gt(r,s,po+49801,"y\xff\x80\xffv\xff",0)
  if rA<0 {goto f128}
  a("\\b, CODEC archive v3.21")
  rc,m=f2l(r,s,po+49824)
  if !(m&&rc==1) {goto f129}
  a("\\b, 1 file")
f129:
  if !(m&&int64(int16(rc))>1) {goto f12a}
  a("\\b, %u files")
f12a:
f128:
f6f:
  rA = gt(r,s,po,"KCF",32)
  if rA<0 {goto f12b}
  a("FreeDOS KEYBoard Layout collection")
  a("\\b, version 0x%x")
  rc,m=f1l(r,s,po+6)
  if !(m&&rc>0) {goto f12d}
  rA = gt(r,s,po+7,">\x00",0)
  if rA<0 {goto f12e}
  a("\\b, author=%-.14s")
f12e:
  rA=ht(r,s,po+7,254,"\xff")
  if rA<0 {goto f12f}
  gf=po+7+rA+1
  a("\\b, info=")
  rA = gt(r,s,po+gf,"x",0)
  if rA<0 {goto f130}
  a("\\b%-.15s")
f130:
f12f:
f12d:
f12b:
  rA = gt(r,s,po,"KLF",32)
  if rA<0 {goto f131}
  a("FreeDOS KEYBoard Layout file")
  a("\\b, version 0x%x")
  rc,m=f1l(r,s,po+5)
  if !(m&&rc>0) {goto f133}
  rA = gt(r,s,po+8,"x",0)
  if rA<0 {goto f134}
  a("\\b, name=%-.2s")
f134:
f133:
f131:
  rA = gt(r,s,po,"\xffKEYB   \x00\x00\x00\x00",0)
  if rA<0 {goto f135}
  rA = gt(r,s,po+12,"\x00\x00\x00\x00`\x04\xf0",0)
  if rA<0 {goto f136}
  a("MS-DOS KEYBoard Layout file")
f136:
f135:
  rc,m=f8l(r,s,po)
  if !(m&&rc&8388071129087==4294967295) {goto f137}
  a(IdentifyMsdosDriver(r,s,po)...)
f137:
  rc,m=f8l(r,s,po)
  if !(m&&rc==365847100979675154) {goto f139}
  a(IdentifyMsdosDriver(r,s,po)...)
f139:
  rc,m=f8l(r,s,po)
  if !(m&&rc==3671137388043632662) {goto f13b}
  a(IdentifyMsdosDriver(r,s,po)...)
f13b:
  rc,m=f8l(r,s,po)
  if !(m&&rc==35747322042318847) {goto f13d}
  a(IdentifyMsdosDriver(r,s,po)...)
f13d:
  rc,m=f8l(r,s,po)
  if !(m&&rc==6192449487699967) {goto f13f}
  a(IdentifyMsdosDriver(r,s,po)...)
f13f:
  rc,m=f8l(r,s,po)
  if !(m&&rc==862167487276384255) {goto f141}
  a(IdentifyMsdosDriver(r,s,po)...)
f141:
  rc,m=f8l(r,s,po)
  if !(m&&rc==557611562475454463) {goto f143}
  a(IdentifyMsdosDriver(r,s,po)...)
f143:
  rc,m=f1l(r,s,po)
  if !(m&&rc==140) {goto f145}
  rA = gt(r,s,po+4,"O====",0)
  if rA>=0 {goto f146}
  rA = gt(r,s,po+5,"MAIN",0)
  if rA>=0 {goto f147}
  rc,m=f1l(r,s,po+4)
  if !(m&&rc>13) {goto f148}
  a("DOS executable (COM, 0x8C-variant)")
f148:
f147:
f146:
f145:
  rc,m=f4l(r,s,po)
  if !(m&&rc==4294906091) {goto f149}
  a("DR-DOS executable (COM)")
f149:
  rc,m=f2b(r,s,po)
  if !(m&&rc&60301>60160) {goto f14a}
f14a:
  rc,m=f1l(r,s,po)
  if !(m&&rc==235) {goto f14b}
  rc,m=f1l(r,s,po+1)
  if !(m&&int64(int8(rc))>-1) {goto f14c}
  ra,k=f1l(r,s,1)
  if !k {goto f14d}
  a(IdentifyMsdosCom(r,s,po)...)
f14d:
f14c:
f14b:
  rc,m=f1l(r,s,po)
  if !(m&&rc==233) {goto f14f}
  rc,m=f2l(r,s,po+1)
  if !(m&&int64(int16(rc))>-1) {goto f150}
  ra,k=f2l(r,s,1)
  if !k {goto f151}
  a(IdentifyMsdosCom(r,s,po)...)
f151:
f150:
  if !(m&&int64(int16(rc))< -259) {goto f153}
  ra,k=f2l(r,s,1)
  if !k {goto f154}
  a(IdentifyMsdosCom(r,s,po)...)
f154:
f153:
f14f:
  rc,m=f1l(r,s,po)
  if !(m&&rc==184) {goto f156}
  rA = gt(r,s,po,"\xb8\xc0\a\x8e",0)
  if rA>=0 {goto f157}
  d[1]=f
  rc,m=f4l(r,s,po+1)
  if !(m&&rc&4294967294==567102718) {goto f158}
  a("COM executable (32-bit COMBOOT")
  rc,m=f4l(r,s,po+1)
  switch rc {
    case 567102719: a("\\b)")
    case 567102718: a("\\b, relocatable)")
    default: {goto f159}
  }
f159:
  d[1]=t
f158:
  if d[1] {goto f15b}
  a("COM executable for DOS")
  d[1]=t
f15b:
f157:
f156:
  rA = gt(r,s,po,"\x81\xfc",32)
  if rA<0 {goto f15c}
  rA = gt(r,s,po+4,"w\x02\xcd \xb9",0)
  if rA<0 {goto f15d}
  rA = gt(r,s,po+36,"UPX!",0)
  if rA<0 {goto f15e}
  a("FREE-DOS executable (COM), UPX compressed")
f15e:
f15d:
f15c:
  rA = gt(r,s,po+252,"Must have DOS version",0)
  if rA<0 {goto f15f}
  a("DR-DOS executable (COM)")
f15f:
  rA = gt(r,s,po+34,"UPX!",0)
  if rA<0 {goto f160}
  a("FREE-DOS executable (COM), UPX compressed")
f160:
  rA = gt(r,s,po+35,"UPX!",0)
  if rA<0 {goto f161}
  a("FREE-DOS executable (COM), UPX compressed")
f161:
  rA = gt(r,s,po+2,"\xcd!",0)
  if rA<0 {goto f162}
  a("COM executable for DOS")
f162:
  rA = gt(r,s,po+4,"\xcd!",0)
  if rA<0 {goto f163}
  a("COM executable for DOS")
f163:
  rA = gt(r,s,po+5,"\xcd!",0)
  if rA<0 {goto f164}
  a("COM executable for DOS")
f164:
  rA = gt(r,s,po+7,"\xcd!",0)
  if rA<0 {goto f165}
  rc,m=f1l(r,s,po)
  if !(m&&rc!=184) {goto f166}
  a("COM executable for DOS")
f166:
f165:
  rA = gt(r,s,po+10,"\xcd!",0)
  if rA<0 {goto f167}
  rA = gt(r,s,po+5,"\xcd!",0)
  if rA>=0 {goto f168}
  a("COM executable for DOS")
f168:
f167:
  rA = gt(r,s,po+13,"\xcd!",0)
  if rA<0 {goto f169}
  a("COM executable for DOS")
f169:
  rA = gt(r,s,po+18,"\xcd!",0)
  if rA<0 {goto f16a}
  a("COM executable for MS-DOS")
f16a:
  rA = gt(r,s,po+23,"\xcd!",0)
  if rA<0 {goto f16b}
  a("COM executable for MS-DOS")
f16b:
  rA = gt(r,s,po+30,"\xcd!",0)
  if rA<0 {goto f16c}
  a("COM executable for MS-DOS")
f16c:
  rA = gt(r,s,po+70,"\xcd!",0)
  if rA<0 {goto f16d}
  a("COM executable for DOS")
f16d:
  rA=ht(r,s,po+6,10,"\xfcW\xf3\xa5\xc3")
  if rA<0 {goto f16e}
  a("COM executable for MS-DOS")
f16e:
  rA=ht(r,s,po+6,10,"\xfcW\xf3\xa4\xc3")
  if rA<0 {goto f16f}
  a("COM executable for DOS")
  rA=ht(r,s,po+24,16,"P\xa4\xff\xd5s")
  if rA<0 {goto f170}
  a("\\b, aPack compressed")
f170:
f16f:
  rA = gt(r,s,po+60,"W Collis\x00\x00",0)
  if rA<0 {goto f171}
  a("COM executable for MS-DOS, Compack compressed")
f171:
  rA = gt(r,s,po,"LZ",32)
  if rA<0 {goto f172}
  a("MS-DOS executable (built-in)")
f172:
  rA = gt(r,s,po,"\xd0\xcf\x11\u0871\x1a\xe1AAFB\r\x00OM\x06\x0e+4\x01\x01\x01\xff",32)
  if rA<0 {goto f173}
  a("AAF legacy file using MS Structured Storage")
  rc,m=f1l(r,s,po+30)
  switch rc {
    case 9: a("(512B sectors)")
    case 12: a("(4kB sectors)")
    default: {goto f174}
  }
f174:
f173:
  rA = gt(r,s,po,"\xd0\xcf\x11\u0871\x1a\xe1\x01\x02\x01\r\x00\x02\x00\x00\x06\x0e+4\x03\x02\x01\x01",32)
  if rA<0 {goto f176}
  a("AAF file using MS Structured Storage")
  rc,m=f1l(r,s,po+30)
  switch rc {
    case 9: a("(512B sectors)")
    case 12: a("(4kB sectors)")
    default: {goto f177}
  }
f177:
f176:
  rA = gt(r,s,po+2080,"Microsoft Word 6.0 Document",0)
  if rA<0 {goto f179}
  a("%s")
f179:
  rA = gt(r,s,po+2080,"Documento Microsoft Word 6",0)
  if rA<0 {goto f17a}
  a("Spanish Microsoft Word 6 document data")
f17a:
  rA = gt(r,s,po+2112,"MSWordDoc",0)
  if rA<0 {goto f17b}
  a("Microsoft Word document data")
f17b:
  rc,m=f4b(r,s,po)
  if !(m&&rc==834535424) {goto f17c}
  a("Microsoft Word Document")
f17c:
  rA = gt(r,s,po,"PO^Q`",32)
  if rA<0 {goto f17d}
  a("Microsoft Word 6.0 Document")
f17d:
  rc,m=f4l(r,s,po+4)
  if !(m&&rc==0) {goto f17e}
  rc,m=f4b(r,s,po)
  switch rc {
    case 4264689664: a("Microsoft Word for Macintosh 1.0")
    case 4264820736: a("Microsoft Word for Macintosh 3.0")
    case 4265017372: a("Microsoft Word for Macintosh 4.0")
    case 4265017379: a("Microsoft Word for Macintosh 5.0")
    default: {goto f17f}
  }
f17f:
f17e:
  rA = gt(r,s,po,"ۥ-\x00\x00\x00",32)
  if rA<0 {goto f183}
  a("Microsoft Word 2.0 Document")
f183:
  rA = gt(r,s,po+512,"\xec\xa5\xc1",32)
  if rA<0 {goto f184}
  a("Microsoft Word Document")
f184:
  rA = gt(r,s,po,"ۥ-\x00",32)
  if rA<0 {goto f185}
  a("Microsoft WinWord 2.0 Document")
f185:
  rA = gt(r,s,po+2080,"Microsoft Excel 5.0 Worksheet",0)
  if rA<0 {goto f186}
  a("%s")
f186:
  rA = gt(r,s,po,"ۥ-\x00",32)
  if rA<0 {goto f187}
  a("Microsoft WinWord 2.0 Document")
f187:
  rA = gt(r,s,po+2080,"Foglio di lavoro Microsoft Exce",0)
  if rA<0 {goto f188}
  a("%s")
f188:
  rA = gt(r,s,po+2114,"Biff5",0)
  if rA<0 {goto f189}
  a("Microsoft Excel 5.0 Worksheet")
f189:
  rA = gt(r,s,po+2121,"Biff5",0)
  if rA<0 {goto f18a}
  a("Microsoft Excel 5.0 Worksheet")
f18a:
  rA = gt(r,s,po,"\t\x04\x06\x00\x00\x00\x10\x00",32)
  if rA<0 {goto f18b}
  a("Microsoft Excel Worksheet")
f18b:
  rc,m=f4b(r,s,po)
  if !(m&&rc==6656) {goto f18c}
  rc,m=f1l(r,s,po+20)
  if !(m&&rc>0) {goto f18d}
  if !(m&&rc< 32) {goto f18e}
  a("Lotus 1-2-3")
  d[2]=f
  rc,m=f2l(r,s,po+4)
  switch rc {
    case 4096: a("WorKsheet, version 3")
    case 4098: a("WorKsheet, version 4")
    case 4099: a("WorKsheet, version 97")
    case 4101: a("WorKsheet, version 9.8 Millennium")
    case 32769: a("FoRMatting data")
    case 32775: a("ForMatting data, version 3")
    default: {goto f18f}
  }
  d[2]=t
f18f:
  if d[2] {goto f195}
  a("unknown")
  rc,m=f2l(r,s,po+6)
  if !(m&&rc==4) {goto f196}
  a("worksheet")
f196:
  if !(m&&rc!=4) {goto f197}
  a("formatting data")
f197:
  a("\\b, revision 0x%x")
  d[2]=t
f195:
  rc,m=f2l(r,s,po+6)
  if !(m&&rc==4) {goto f199}
  a("\\b, cell range")
  rc,m=f4l(r,s,po+8)
  if !(m&&rc!=0) {goto f19a}
  rc,m=f1l(r,s,po+10)
  if !(m&&rc>0) {goto f19b}
  a("\\b%d*")
f19b:
  a("\\b%d,")
  a("\\b%d-")
f19a:
  rc,m=f1l(r,s,po+14)
  if !(m&&rc>0) {goto f19e}
  a("\\b%d*")
f19e:
  a("\\b%d,")
  a("\\b%d")
  rc,m=f1l(r,s,po+20)
  if !(m&&rc>1) {goto f1a1}
  a("\\b, character set 0x%x")
f1a1:
  a("\\b, flags 0x%x")
  d[2]=t
f199:
  if !(m&&rc!=4) {goto f1a3}
  rA=ht(r,s,po+30,29,"\x00\xae")
  if rA<0 {goto f1a4}
  gf=po+30+rA+2
  rA = gt(r,s,po+4+gf,">\x00",0)
  if rA<0 {goto f1a5}
  a("\\b, 1st font \"%s\"")
f1a5:
f1a4:
  d[2]=t
f1a3:
f18e:
f18d:
f18c:
  rc,m=f4b(r,s,po)
  if !(m&&rc==512) {goto f1a6}
  rc,m=f1l(r,s,po+7)
  if !(m&&rc==0) {goto f1a7}
  rc,m=f1l(r,s,po+6)
  if !(m&&rc>0) {goto f1a8}
  a("Lotus")
  d[2]=f
  rc,m=f2l(r,s,po+4)
  switch rc {
    case 7: a("1-2-3 CoNFiguration, version 2.x (PGRAPH.CNF)")
    case 3077: a("1-2-3 CoNFiguration, version 2.4J")
    case 2049: a("1-2-3 CoNFiguration, version 1-2.1")
    case 2050: a("Symphony CoNFiguration")
    case 2052: a("1-2-3 CoNFiguration, version 2.2")
    case 2058: a("1-2-3 CoNFiguration, version 2.3-2.4")
    case 5122: a("1-2-3 CoNFiguration, version 3.x")
    case 5200: a("1-2-3 CoNFiguration, version 4.x")
    case 1028: a("1-2-3 WorKSheet, version 1")
    case 1029: a("Symphony WoRksheet, version 1.0")
    case 1030: a("1-2-3/Symphony worksheet, version 2")
    case 1536: a("1-2-3 WorKsheet, version 1.xJ")
    case 1538: a("1-2-3 worksheet, version 2.4J")
    case 32774: a("1-2-3 ForMaTting data, version 2.x")
    case 32775: a("1-2-3 FoRMatting data, version 2.0")
    default: {goto f1a9}
  }
  d[2]=t
f1a9:
  if d[2] {goto f1b8}
  a("unknown worksheet or configuration")
  a("\\b, revision 0x%x")
  d[2]=t
f1b8:
  a(IdentifyLotusCells(r,s,po+6)...)
  d[2]=t
  ra,k=f2l(r,s,8)
  if !k {goto f1bb}
  a(IdentifyLotusCells(r,s,int64(ra)+10)...)
  d[2]=t
f1bb:
f1a8:
f1a7:
f1a6:
  rA = gt(r,s,po,"WordPro\x00",32)
  if rA<0 {goto f1bc}
  a("Lotus WordPro")
f1bc:
  rA = gt(r,s,po,"WordPro\r\xfb",32)
  if rA<0 {goto f1bd}
  a("Lotus WordPro")
f1bd:
  rA = gt(r,s,po,"q\xa8\x00\x00\x01\x02",0)
  if rA<0 {goto f1be}
  rA = gt(r,s,po+12,"Stirling Technologies,",0)
  if rA<0 {goto f1bf}
  a("InstallShield Uninstall Script")
f1bf:
f1be:
  rA = gt(r,s,po,"Nullsoft AVS Preset ",32)
  if rA<0 {goto f1c0}
  a("Winamp plug in")
f1c0:
  rA = gt(r,s,po,"\xd7\xcdƚ",32)
  if rA<0 {goto f1c1}
  a("ms-windows metafont .wmf")
f1c1:
  rA = gt(r,s,po,"\x02\x00\t\x00",32)
  if rA<0 {goto f1c2}
  a("ms-windows metafont .wmf")
f1c2:
  rA = gt(r,s,po,"\x01\x00\t\x00",32)
  if rA<0 {goto f1c3}
  a("ms-windows metafont .wmf")
f1c3:
  rA = gt(r,s,po,"\x03\x01\x01\x048\x01\x00\x00",32)
  if rA<0 {goto f1c4}
  a("tz3 ms-works file")
f1c4:
  rA = gt(r,s,po,"\x03\x02\x01\x048\x01\x00\x00",32)
  if rA<0 {goto f1c5}
  a("tz3 ms-works file")
f1c5:
  rA = gt(r,s,po,"\x03\x03\x01\x048\x01\x00\x00",32)
  if rA<0 {goto f1c6}
  a("tz3 ms-works file")
f1c6:
  rA = gt(r,s,po,"\x89\x00?\x03\x05\x003\x9fW5\x17\xb6i4\x05%A\x9b\x11\x02",0)
  if rA<0 {goto f1c7}
  a("PGP sig")
f1c7:
  rA = gt(r,s,po,"\x89\x00?\x03\x05\x003\x9fW6\x17\xb6i4\x05%A\x9b\x11\x02",0)
  if rA<0 {goto f1c8}
  a("PGP sig")
f1c8:
  rA = gt(r,s,po,"\x89\x00?\x03\x05\x003\x9fW7\x17\xb6i4\x05%A\x9b\x11\x02",0)
  if rA<0 {goto f1c9}
  a("PGP sig")
f1c9:
  rA = gt(r,s,po,"\x89\x00?\x03\x05\x003\x9fW8\x17\xb6i4\x05%A\x9b\x11\x02",0)
  if rA<0 {goto f1ca}
  a("PGP sig")
f1ca:
  rA = gt(r,s,po,"\x89\x00?\x03\x05\x003\x9fW9\x17\xb6i4\x05%A\x9b\x11\x02",0)
  if rA<0 {goto f1cb}
  a("PGP sig")
f1cb:
  rA = gt(r,s,po,"\x89\x00\x95\x03\x05\x002R\x87\xc4@\xe5\"",0)
  if rA<0 {goto f1cc}
  a("PGP sig")
f1cc:
  rA = gt(r,s,po,"MDIF\x1a\x00\b\x00\x00\x00\xfa&@}\x01\x00\x01\x1e\x01\x00",32)
  if rA<0 {goto f1cd}
  a("MS Windows special zipped file")
f1cd:
  rA = gt(r,s,po,"BA(\x00\x00\x00.\x00\x00\x00\x00\x00\x00\x00",32)
  if rA<0 {goto f1ce}
  a("Icon for MS Windows")
f1ce:
  rc,m=f4b(r,s,po)
  if !(m&&rc==256) {goto f1cf}
  rc,m=f1l(r,s,po+9)
  if !(m&&rc==0) {goto f1d0}
  a(IdentifyCurIcoDir(r,s,po)...)
f1d0:
  if !(m&&rc==255) {goto f1d3}
  a(IdentifyCurIcoDir(r,s,po)...)
f1d3:
f1cf:
  rc,m=f4b(r,s,po)
  if !(m&&rc==512) {goto f1d6}
  rc,m=f1l(r,s,po+9)
  if !(m&&rc==0) {goto f1d7}
  a(IdentifyCurIcoDir(r,s,po)...)
f1d7:
  if !(m&&rc==255) {goto f1d9}
  a(IdentifyCurIcoDir(r,s,po)...)
f1d9:
f1d6:
  rA = gt(r,s,po,"PK\b\bBGI",32)
  if rA<0 {goto f1db}
  a("Borland font")
  rA = gt(r,s,po+4,">\x00",0)
  if rA<0 {goto f1dc}
  a("%s")
f1dc:
f1db:
  rA = gt(r,s,po,"pk\b\bBGI",32)
  if rA<0 {goto f1dd}
  a("Borland device")
  rA = gt(r,s,po+4,">\x00",0)
  if rA<0 {goto f1de}
  a("%s")
f1de:
f1dd:
  rc,m=f4l(r,s,po)
  if !(m&&rc==4) {goto f1df}
  rc,m=f4l(r,s,po+12)
  if !(m&&rc==280) {goto f1e0}
  a("Windows Recycle Bin INFO2 file (Win98 or below)")
f1e0:
f1df:
  rc,m=f4l(r,s,po)
  if !(m&&rc==5) {goto f1e1}
  rc,m=f4l(r,s,po+12)
  if !(m&&rc==800) {goto f1e2}
  a("Windows Recycle Bin INFO2 file (Win2k - WinXP)")
f1e2:
f1e1:
  rA = gt(r,s,po+9,"GERBILDOC",0)
  if rA<0 {goto f1e3}
  a("First Choice document")
f1e3:
  rA = gt(r,s,po+9,"GERBILDB",0)
  if rA<0 {goto f1e4}
  a("First Choice database")
f1e4:
  rA = gt(r,s,po+9,"GERBILCLIP",0)
  if rA<0 {goto f1e5}
  a("First Choice database")
f1e5:
  rA = gt(r,s,po,"GERBIL",0)
  if rA<0 {goto f1e6}
  a("First Choice device file")
f1e6:
  rA = gt(r,s,po+9,"RABBITGRAPH",0)
  if rA<0 {goto f1e7}
  a("RabbitGraph file")
f1e7:
  rA = gt(r,s,po,"DCU1",0)
  if rA<0 {goto f1e8}
  a("Borland Delphi .DCU file")
f1e8:
  rA = gt(r,s,po,"=!<spell>",0)
  if rA<0 {goto f1e9}
  a("MKS Spell hash list (old format)")
f1e9:
  rA = gt(r,s,po,"=!<spell2>",0)
  if rA<0 {goto f1ea}
  a("MKS Spell hash list")
f1ea:
  rc,m=f4l(r,s,po)
  if !(m&&rc==134769520) {goto f1eb}
  a("TurboC BGI file")
f1eb:
  rc,m=f4l(r,s,po)
  if !(m&&rc==134761296) {goto f1ec}
  a("TurboC Font file")
f1ec:
  rA = gt(r,s,po,"TPF0",0)
  if rA<0 {goto f1ed}
f1ed:
  rA = gt(r,s,po,"PMCC",0)
  if rA<0 {goto f1ee}
  a("Windows 3.x .GRP file")
f1ee:
  rA = gt(r,s,po+1,"RDC-meg",0)
  if rA<0 {goto f1ef}
  a("MegaDots")
  rc,m=f1l(r,s,po+8)
  if !(m&&int64(int8(rc))>47) {goto f1f0}
  a("version %c")
f1f0:
  rc,m=f1l(r,s,po+9)
  if !(m&&int64(int8(rc))>47) {goto f1f1}
  a("\\b.%c file")
f1f1:
f1ef:
  rc,m=f4l(r,s,po)
  if !(m&&rc==76) {goto f1f2}
  rc,m=f4l(r,s,po+4)
  if !(m&&rc==136193) {goto f1f3}
  a("Windows shortcut file")
f1f3:
f1f2:
  rA = gt(r,s,po+369,"MICROSOFT PIFEX\x00",0)
  if rA<0 {goto f1f4}
  a("Windows Program Information File")
  rA = gt(r,s,po+36,">\x00",0)
  if rA<0 {goto f1f5}
  a("\\b for %.63s")
f1f5:
  rA = gt(r,s,po+101,">\x00",0)
  if rA<0 {goto f1f6}
  a("\\b, directory=%.64s")
f1f6:
  rA = gt(r,s,po+165,">\x00",0)
  if rA<0 {goto f1f7}
  a("\\b, parameters=%.64s")
f1f7:
  rA=ht(r,s,po+391,2901,"WINDOWS VMM 4.0\x00")
  if rA<0 {goto f1f8}
  gf=po+391+rA+16
  rc,m=f1l(r,s,po+94+gf)
  if !(m&&rc>0) {goto f1f9}
  gf=po+94+gf+1
  rA = gt(r,s,po+-1+gf,"<PIFMGR.DLL",0)
  if rA<0 {goto f1fa}
  a("\\b, icon=%s")
f1fa:
  rA = gt(r,s,po+-1+gf,">PIFMGR.DLL",0)
  if rA<0 {goto f1fb}
  a("\\b, icon=%s")
f1fb:
f1f9:
  rc,m=f1l(r,s,po+240+gf)
  if !(m&&rc>0) {goto f1fc}
  gf=po+240+gf+1
  rA = gt(r,s,po+-1+gf,"<Terminal",0)
  if rA<0 {goto f1fd}
  a("\\b, font=%.32s")
f1fd:
  rA = gt(r,s,po+-1+gf,">Terminal",0)
  if rA<0 {goto f1fe}
  a("\\b, font=%.32s")
f1fe:
f1fc:
  rc,m=f1l(r,s,po+272+gf)
  if !(m&&rc>0) {goto f1ff}
  gf=po+272+gf+1
  rA = gt(r,s,po+-1+gf,"<Lucida Console",0)
  if rA<0 {goto f200}
  a("\\b, TrueTypeFont=%.32s")
f200:
  rA = gt(r,s,po+-1+gf,">Lucida Console",0)
  if rA<0 {goto f201}
  a("\\b, TrueTypeFont=%.32s")
f201:
f1ff:
f1f8:
  rA=ht(r,s,po+391,2901,"WINDOWS NT  3.1\x00")
  if rA<0 {goto f202}
  a("\\b, Windows NT-style")
f202:
  rA=ht(r,s,po+391,2901,"CONFIG  SYS 4.0\x00")
  if rA<0 {goto f203}
  a("\\b +CONFIG.SYS")
f203:
  rA=ht(r,s,po+391,2901,"AUTOEXECBAT 4.0\x00")
  if rA<0 {goto f204}
  a("\\b +AUTOEXEC.BAT")
f204:
f1f4:
  rc,m=f4b(r,s,po)
  if !(m&&rc==3318797254) {goto f205}
  a("DOS EPS Binary File")
  rc,m=f4l(r,s,po+4)
  if !(m&&int64(int32(rc))>0) {goto f206}
  a("Postscript starts at byte %d")
  rc,m=f4l(r,s,po+8)
  if !(m&&int64(int32(rc))>0) {goto f207}
  a("length %d")
  rc,m=f4l(r,s,po+12)
  if !(m&&int64(int32(rc))>0) {goto f208}
  a("Metafile starts at byte %d")
  rc,m=f4l(r,s,po+16)
  if !(m&&int64(int32(rc))>0) {goto f209}
  a("length %d")
f209:
f208:
  rc,m=f4l(r,s,po+20)
  if !(m&&int64(int32(rc))>0) {goto f20a}
  a("TIFF starts at byte %d")
  rc,m=f4l(r,s,po+24)
  if !(m&&int64(int32(rc))>0) {goto f20b}
  a("length %d")
f20b:
f20a:
f207:
f206:
f205:
  rc,m=f2l(r,s,po)
  if !(m&&rc==574529400) {goto f20c}
  a("TNEF")
f20c:
  rA = gt(r,s,po,"NG\x00\x01",0)
  if rA<0 {goto f20d}
  rc,m=f4l(r,s,po+2)
  if !(m&&rc==256) {goto f20e}
  a("Norton Guide")
  rA = gt(r,s,po+8,">\x00",0)
  if rA<0 {goto f20f}
  a("\"%-.40s\"")
f20f:
  rA = gt(r,s,po+48,">\x00",0)
  if rA<0 {goto f210}
  a("\\b, %-.66s")
f210:
  rA = gt(r,s,po+114,">\x00",0)
  if rA<0 {goto f211}
  a("%-.66s")
f211:
f20e:
f20d:
  rc,m=f4l(r,s,po)
  if !(m&&rc==1212429320) {goto f212}
  a("4DOS help file")
  rA = gt(r,s,po+4,"x",0)
  if rA<0 {goto f213}
  a("\\b, version %-4.4s")
f213:
f212:
  rc,m=f8l(r,s,po)
  if !(m&&rc==16325548649369164) {goto f214}
  a("MS Advisor help file")
f214:
  rA = gt(r,s,po,"ITSF\x03\x00\x00\x00`\x00\x00\x00",32)
  if rA<0 {goto f215}
  a("MS Windows HtmlHelp Data")
f215:
  rA = gt(r,s,po+2,"GFA-BASIC3",32)
  if rA<0 {goto f216}
  a("GFA-BASIC 3 data")
f216:
  rA = gt(r,s,po,"MSCF\x00\x00\x00\x00",32)
  if rA<0 {goto f217}
  a("Microsoft Cabinet archive data")
  a("\\b, %u bytes")
  rc,m=f2l(r,s,po+28)
  if !(m&&rc==1) {goto f219}
  a("\\b, 1 file")
f219:
  if !(m&&int64(int16(rc))>1) {goto f21a}
  a("\\b, %u files")
f21a:
f217:
  rA = gt(r,s,po,"ISc(",32)
  if rA<0 {goto f21b}
  a("InstallShield Cabinet archive data")
  rc,m=f1l(r,s,po+5)
  if !(m&&rc&240==96) {goto f21c}
  a("version 6,")
f21c:
  if !(m&&rc&240!=96) {goto f21d}
  a("version 4/5,")
f21d:
  ra,k=f4l(r,s,12)
  if !k {goto f21e}
  a("%u files")
f21e:
f21b:
  rA = gt(r,s,po,"MSCE\x00\x00\x00\x00",32)
  if rA<0 {goto f21f}
  a("Microsoft WinCE install header")
  rc,m=f4l(r,s,po+20)
  switch rc {
    case 0: a("\\b, architecture-independent")
    case 103: a("\\b, Hitachi SH3")
    case 104: a("\\b, Hitachi SH4")
    case 2577: a("\\b, StrongARM")
    case 4000: a("\\b, MIPS R4000")
    case 10003: a("\\b, Hitachi SH3")
    case 10004: a("\\b, Hitachi SH3E")
    case 10005: a("\\b, Hitachi SH4")
    case 70001: a("\\b, ARM 7TDMI")
    default: {goto f220}
  }
f220:
  rc,m=f2l(r,s,po+52)
  if !(m&&rc==1) {goto f229}
  a("\\b, 1 file")
f229:
  if !(m&&int64(int16(rc))>1) {goto f22a}
  a("\\b, %u files")
f22a:
  rc,m=f2l(r,s,po+56)
  if !(m&&rc==1) {goto f22b}
  a("\\b, 1 registry entry")
f22b:
  if !(m&&int64(int16(rc))>1) {goto f22c}
  a("\\b, %u registry entries")
f22c:
f21f:
  rc,m=f4l(r,s,po)
  if !(m&&rc==1) {goto f22d}
  rA = gt(r,s,po+40," EMF",0)
  if rA<0 {goto f22e}
  a("Windows Enhanced Metafile (EMF) image data")
  a("version 0x%x")
f22e:
f22d:
  rA = gt(r,s,po,"\xd0\xcf\x11\u0871\x1a\xe1",32)
  if rA<0 {goto f230}
  a("Microsoft Office Document")
  rA = gt(r,s,po+546,"bjbj",0)
  if rA<0 {goto f231}
  a("Microsoft Word Document")
f231:
  rA = gt(r,s,po+546,"jbjb",0)
  if rA<0 {goto f232}
  a("Microsoft Word Document")
f232:
f230:
  rA = gt(r,s,po,"\x94\xa6.",32)
  if rA<0 {goto f233}
  a("Microsoft Word Document")
f233:
  rA = gt(r,s,po+512,"R\x00o\x00o\x00t\x00 \x00E\x00n\x00t\x00r\x00y",0)
  if rA<0 {goto f234}
  a("Microsoft Word Document")
f234:
  rA = gt(r,s,po,"$RBU",32)
  if rA<0 {goto f235}
  rA = gt(r,s,po+23,"Dell",0)
  if rA<0 {goto f236}
  a("%s system BIOS")
f236:
  rc,m=f1l(r,s,po+5)
  if !(m&&rc==2) {goto f237}
  a("version %d.")
  a("\\b%d.")
  a("\\b%d")
f237:
  if !(m&&int64(int8(rc))< 2) {goto f23b}
  rA = gt(r,s,po+48,"x",0)
  if rA<0 {goto f23c}
  a("version %.3s")
f23c:
f23b:
f235:
  rA = gt(r,s,po,"DDS |\x00\x00\x00",32)
  if rA<0 {goto f23d}
  a("Microsoft DirectDraw Surface (DDS),")
  rc,m=f4l(r,s,po+16)
  if !(m&&int64(int32(rc))>0) {goto f23e}
  a("%d x")
f23e:
  rc,m=f4l(r,s,po+12)
  if !(m&&int64(int32(rc))>0) {goto f23f}
  a("%d,")
f23f:
  rA = gt(r,s,po+84,"x",0)
  if rA<0 {goto f240}
  a("%.4s")
f240:
f23d:
  rA = gt(r,s,po,"ITOLITLS",32)
  if rA<0 {goto f241}
  a("Microsoft Reader eBook Data")
  a("\\b, version %u")
f241:
  rA = gt(r,s,po,"B000FF\n",32)
  if rA<0 {goto f243}
  a("Windows Embedded CE binary image")
f243:
  rA = gt(r,s,po,"MSWIM\x00\x00\x00",32)
  if rA<0 {goto f244}
  a("Windows imaging (WIM) image")
f244:
  rA = gt(r,s,po,"WLPWM\x00\x00\x00",32)
  if rA<0 {goto f245}
  a("Windows imaging (WIM) image, wimlib pipable format")
f245:
  rA = gt(r,s,po,"\xfc\x03\x00",0)
  if rA<0 {goto f246}
  a("Mallard BASIC program data (v1.11)")
f246:
  rA = gt(r,s,po,"\xfc\x04\x00",0)
  if rA<0 {goto f247}
  a("Mallard BASIC program data (v1.29+)")
f247:
  rA = gt(r,s,po,"\xfc\x03\x01",0)
  if rA<0 {goto f248}
  a("Mallard BASIC protected program data (v1.11)")
f248:
  rA = gt(r,s,po,"\xfc\x04\x01",0)
  if rA<0 {goto f249}
  a("Mallard BASIC protected program data (v1.29+)")
f249:
  rA = gt(r,s,po,"MIOPEN",0)
  if rA<0 {goto f24a}
  a("Mallard BASIC Jetsam data")
f24a:
  rA = gt(r,s,po,"Jetsam0",0)
  if rA<0 {goto f24b}
  a("Mallard BASIC Jetsam index data")
f24b:
  rc,m=f2l(r,s,po+3)
  if !(m&&rc>1979) {goto f24c}
  rc,m=f1l(r,s,po+5)
  if !(m&&(rc-1)< 31) {goto f24d}
  rc,m=f1l(r,s,po+6)
  if !(m&&(rc-1)< 12) {goto f24e}
  rA = gt(r,s,po+7,"\x00\x00\x00\x00\x00\x00\x00\x00",0)
  if rA<0 {goto f24f}
  a("DOS 2.0 backup id file, sequence %d")
  rc,m=f1l(r,s,po)
  if !(m&&rc==255) {goto f251}
  a("\\b, last disk")
f251:
f24f:
f24e:
f24d:
f24c:
  rc,m=f1l(r,s,po+83)
  if !(m&&(rc-1)< 80) {goto f252}
  rA = gt(r,s,po+84,"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",0)
  if rA<0 {goto f253}
  rA = gt(r,s,po+5,"x",0)
  if rA<0 {goto f254}
  a("DOS 2.0 backed up file %s,")
f254:
  rc,m=f1l(r,s,po)
  if !(m&&rc==255) {goto f255}
  a("complete file")
f255:
  if !(m&&rc!=255) {goto f256}
  a("split file, sequence %d")
f256:
f253:
f252:
  rA = gt(r,s,po,"\x8bBACKUP ",0)
  if rA<0 {goto f258}
  rA = gt(r,s,po+10,"\x00\x00\x00\x00\x00\x00\x00\x00",0)
  if rA<0 {goto f259}
  a("DOS 3.3 backup control file, sequence %d")
  rc,m=f1l(r,s,po+138)
  if !(m&&rc==255) {goto f25b}
  a("\\b, last disk")
f25b:
f259:
f258:
  return out
}

func IdentifyCurEntry(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  a(IdentifyCurIcoEntry(r,s,po)...)
  a("\\b, hotspot @%dx")
  a("\\b%d")
  return out
}

func IdentifyCurIcoDir(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f4l(r,s,po+18)
  if !(m&&rc==6) {goto f1}
  ra,k=f4l(r,s,18)
  if !k {goto f2}
  a("MS Windows")
  rc,m=f4b(r,s,po)
  if !(m&&rc==256) {goto f3}
  a("icon resource")
  a("- %d icon")
  if !(m&&rc>1) {goto f5}
  a("\\bs")
f5:
  a(IdentifyIcoEntry(r,s,po+6)...)
  rc,m=f2l(r,s,po+4)
  if !(m&&rc>1) {goto f7}
  a(IdentifyIcoEntry(r,s,po+22)...)
f7:
f3:
  if !(m&&rc==512) {goto f9}
  a("cursor resource")
  a("- %d icon")
  if !(m&&rc>1) {goto fb}
  a("\\bs")
fb:
  a(IdentifyCurEntry(r,s,po+6)...)
f9:
f2:
f1:
  return out
}

func IdentifyCurIcoEntry(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f1l(r,s,po)
  if !(m&&rc==0) {goto f1}
  a("\\b, 256x")
f1:
  if !(m&&rc!=0) {goto f2}
  a("\\b, %dx")
f2:
  rc,m=f1l(r,s,po+1)
  if !(m&&rc==0) {goto f3}
  a("\\b256")
f3:
  if !(m&&rc!=0) {goto f4}
  a("\\b%d")
f4:
  rc,m=f1l(r,s,po+2)
  if !(m&&rc!=0) {goto f5}
  a("\\b, %d colors")
f5:
  ra,k=f4l(r,s,12)
  if !k {goto f6}
  rc,m=f4b(r,s,int64(ra))
  if !(m&&rc==2303741511) {goto f6}
f6:
  if !k {goto f7}
  if !(m&&rc!=2303741511) {goto f7}
f7:
  return out
}

func IdentifyElfLe(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  d[0]=f
  rc,m=f2l(r,s,po+16)
  switch rc {
    case 0: a("no file type,")
    case 1: a("relocatable,")
    case 2: a("executable,")
    case 3: a("shared object,")
    case 4: a("core file")
    default: {goto f1}
  }
  d[0]=t
f1:
  rc,m=f2l(r,s,po+16)
  if !(m&&rc==65280) {goto f6}
  a("processor-specific,")
  d[0]=t
f6:
  d[0]=f
  d[0]=t
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 0: a("no machine,")
    case 1: a("AT&T WE32100,")
    case 2: a("SPARC,")
    case 3: a("Intel 80386,")
    default: {goto f8}
  }
  d[0]=t
f8:
  rc,m=f2l(r,s,po+18)
  if !(m&&rc==4) {goto fc}
  a("Motorola m68k,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto fd}
  rc,m=f4l(r,s,po+36)
  if !(m&&rc==16777216) {goto fe}
  a("68000,")
fe:
  if !(m&&rc==8454144) {goto ff}
  a("CPU32,")
ff:
  if !(m&&rc==0) {goto f10}
  a("68020,")
f10:
fd:
  d[0]=t
fc:
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 5: a("Motorola m88k,")
    case 6: a("Intel 80486,")
    case 7: a("Intel 80860,")
    default: {goto f11}
  }
  d[0]=t
f11:
  rc,m=f2l(r,s,po+18)
  if !(m&&rc==8) {goto f14}
  a("MIPS,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto f15}
  rc,m=f4l(r,s,po+36)
  if !(m&&rc==32) {goto f16}
  a("N32")
f16:
f15:
  d[0]=t
f14:
  if !(m&&rc==10) {goto f17}
  a("MIPS,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto f18}
  rc,m=f4l(r,s,po+36)
  if !(m&&rc==32) {goto f19}
  a("N32")
f19:
f18:
  d[0]=t
f17:
  if !(m&&rc==8) {goto f1a}
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto f1b}
  rc,m=f4l(r,s,po+36)
  if !(m&&rc&4026531840==0) {goto f1c}
  a("MIPS-I")
f1c:
  if !(m&&rc&4026531840==268435456) {goto f1d}
  a("MIPS-II")
f1d:
  if !(m&&rc&4026531840==536870912) {goto f1e}
  a("MIPS-III")
f1e:
  if !(m&&rc&4026531840==805306368) {goto f1f}
  a("MIPS-IV")
f1f:
  if !(m&&rc&4026531840==1073741824) {goto f20}
  a("MIPS-V")
f20:
  if !(m&&rc&4026531840==1342177280) {goto f21}
  a("MIPS32")
f21:
  if !(m&&rc&4026531840==1610612736) {goto f22}
  a("MIPS64")
f22:
  if !(m&&rc&4026531840==1879048192) {goto f23}
  a("MIPS32 rel2")
f23:
  if !(m&&rc&4026531840==2147483648) {goto f24}
  a("MIPS64 rel2")
f24:
f1b:
  if !(m&&rc==2) {goto f25}
  rc,m=f4l(r,s,po+48)
  if !(m&&rc&4026531840==0) {goto f26}
  a("MIPS-I")
f26:
  if !(m&&rc&4026531840==268435456) {goto f27}
  a("MIPS-II")
f27:
  if !(m&&rc&4026531840==536870912) {goto f28}
  a("MIPS-III")
f28:
  if !(m&&rc&4026531840==805306368) {goto f29}
  a("MIPS-IV")
f29:
  if !(m&&rc&4026531840==1073741824) {goto f2a}
  a("MIPS-V")
f2a:
  if !(m&&rc&4026531840==1342177280) {goto f2b}
  a("MIPS32")
f2b:
  if !(m&&rc&4026531840==1610612736) {goto f2c}
  a("MIPS64")
f2c:
  if !(m&&rc&4026531840==1879048192) {goto f2d}
  a("MIPS32 rel2")
f2d:
  if !(m&&rc&4026531840==2147483648) {goto f2e}
  a("MIPS64 rel2")
f2e:
f25:
  d[0]=t
f1a:
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 9: a("Amdahl,")
    case 10: a("MIPS (deprecated),")
    case 11: a("RS6000,")
    default: {goto f2f}
  }
  d[0]=t
f2f:
  rc,m=f2l(r,s,po+18)
  if !(m&&rc==15) {goto f32}
  a("PA-RISC,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto f33}
  rc,m=f2l(r,s,po+38)
  if !(m&&rc==532) {goto f34}
  a("2.0")
f34:
  rc,m=f2l(r,s,po+36)
  if !(m&&rc==8) {goto f35}
  a("(LP64)")
f35:
f33:
  if !(m&&rc==2) {goto f36}
  rc,m=f2l(r,s,po+50)
  if !(m&&rc==532) {goto f37}
  a("2.0")
f37:
  rc,m=f2l(r,s,po+48)
  if !(m&&rc==8) {goto f38}
  a("(LP64)")
f38:
f36:
  d[0]=t
f32:
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 16: a("nCUBE,")
    case 17: a("Fujitsu VPP500,")
    default: {goto f39}
  }
  d[0]=t
f39:
  rc,m=f2l(r,s,po+18)
  if !(m&&rc==18) {goto f3b}
  a("SPARC32PLUS,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto f3c}
  rc,m=f4l(r,s,po+36)
  if !(m&&rc&16776960==256) {goto f3d}
  a("V8+ Required,")
f3d:
  if !(m&&rc&16776960==512) {goto f3e}
  a("Sun UltraSPARC1 Extensions Required,")
f3e:
  if !(m&&rc&16776960==1024) {goto f3f}
  a("HaL R1 Extensions Required,")
f3f:
  if !(m&&rc&16776960==2048) {goto f40}
  a("Sun UltraSPARC3 Extensions Required,")
f40:
f3c:
  d[0]=t
f3b:
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 19: a("Intel 80960,")
    case 20: a("PowerPC or cisco 4500,")
    case 21: a("64-bit PowerPC or cisco 7500,")
    case 22: a("IBM S/390,")
    case 23: a("Cell SPU,")
    case 24: a("cisco SVIP,")
    case 25: a("cisco 7200,")
    case 36: a("NEC V800 or cisco 12000,")
    case 37: a("Fujitsu FR20,")
    case 38: a("TRW RH-32,")
    case 39: a("Motorola RCE,")
    default: {goto f41}
  }
  d[0]=t
f41:
  rc,m=f2l(r,s,po+18)
  if !(m&&rc==40) {goto f4c}
  a("ARM,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==1) {goto f4d}
  rc,m=f4l(r,s,po+36)
  if !(m&&rc&4278190080==67108864) {goto f4e}
  a("EABI4")
f4e:
  if !(m&&rc&4278190080==83886080) {goto f4f}
  a("EABI5")
f4f:
  if !(m&&rc==8388608) {goto f50}
  a("BE8")
f50:
  if !(m&&rc==4194304) {goto f51}
  a("LE8")
f51:
f4d:
  d[0]=t
f4c:
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 41: a("Alpha,")
    case 42: a("Renesas SH,")
    default: {goto f52}
  }
  d[0]=t
f52:
  rc,m=f2l(r,s,po+18)
  if !(m&&rc==43) {goto f54}
  a("SPARC V9,")
  rc,m=f1l(r,s,po+4)
  if !(m&&rc==2) {goto f55}
  rc,m=f4l(r,s,po+48)
  if !(m&&rc&16776960==512) {goto f56}
  a("Sun UltraSPARC1 Extensions Required,")
f56:
  if !(m&&rc&16776960==1024) {goto f57}
  a("HaL R1 Extensions Required,")
f57:
  if !(m&&rc&16776960==2048) {goto f58}
  a("Sun UltraSPARC3 Extensions Required,")
f58:
  if !(m&&rc&3==0) {goto f59}
  a("total store ordering,")
f59:
  if !(m&&rc&3==1) {goto f5a}
  a("partial store ordering,")
f5a:
  if !(m&&rc&3==2) {goto f5b}
  a("relaxed memory ordering,")
f5b:
f55:
  d[0]=t
f54:
  rc,m=f2l(r,s,po+18)
  switch rc {
    case 44: a("Siemens Tricore Embedded Processor,")
    case 45: a("Argonaut RISC Core, Argonaut Technologies Inc.,")
    case 46: a("Renesas H8/300,")
    case 47: a("Renesas H8/300H,")
    case 48: a("Renesas H8S,")
    case 49: a("Renesas H8/500,")
    case 50: a("IA-64,")
    case 51: a("Stanford MIPS-X,")
    case 52: a("Motorola Coldfire,")
    case 53: a("Motorola M68HC12,")
    case 54: a("Fujitsu MMA,")
    case 55: a("Siemens PCP,")
    case 56: a("Sony nCPU,")
    case 57: a("Denso NDR1,")
    case 58: a("Start*Core,")
    case 59: a("Toyota ME16,")
    case 60: a("ST100,")
    case 61: a("Tinyj emb.,")
    case 62: a("x86-64,")
    case 63: a("Sony DSP,")
    case 64: a("DEC PDP-10,")
    case 65: a("DEC PDP-11,")
    case 66: a("FX66,")
    case 67: a("ST9+ 8/16 bit,")
    case 68: a("ST7 8 bit,")
    case 69: a("MC68HC16,")
    case 70: a("MC68HC11,")
    case 71: a("MC68HC08,")
    case 72: a("MC68HC05,")
    case 73: a("SGI SVx or Cray NV1,")
    case 74: a("ST19 8 bit,")
    case 75: a("Digital VAX,")
    case 76: a("Axis cris,")
    case 77: a("Infineon 32-bit embedded,")
    case 78: a("Element 14 64-bit DSP,")
    case 79: a("LSI Logic 16-bit DSP,")
    case 80: a("MMIX,")
    case 81: a("Harvard machine-independent,")
    case 82: a("SiTera Prism,")
    case 83: a("Atmel AVR 8-bit,")
    case 84: a("Fujitsu FR30,")
    case 85: a("Mitsubishi D10V,")
    case 86: a("Mitsubishi D30V,")
    case 87: a("NEC v850,")
    case 88: a("Renesas M32R,")
    case 89: a("Matsushita MN10300,")
    case 90: a("Matsushita MN10200,")
    case 91: a("picoJava,")
    case 92: a("OpenRISC,")
    case 93: a("ARC Cores Tangent-A5,")
    case 94: a("Tensilica Xtensa,")
    case 95: a("Alphamosaic VideoCore,")
    case 96: a("Thompson Multimedia,")
    case 97: a("NatSemi 32k,")
    case 98: a("Tenor Network TPC,")
    case 99: a("Trebia SNP 1000,")
    case 100: a("STMicroelectronics ST200,")
    case 101: a("Ubicom IP2022,")
    case 102: a("MAX Processor,")
    case 103: a("NatSemi CompactRISC,")
    case 104: a("Fujitsu F2MC16,")
    case 105: a("TI msp430,")
    case 106: a("Analog Devices Blackfin,")
    case 107: a("S1C33 Family of Seiko Epson,")
    case 108: a("Sharp embedded,")
    case 109: a("Arca RISC,")
    case 110: a("PKU-Unity Ltd.,")
    case 111: a("eXcess: 16/32/64-bit,")
    case 112: a("Icera Deep Execution Processor,")
    case 113: a("Altera Nios II,")
    case 114: a("NatSemi CRX,")
    case 115: a("Motorola XGATE,")
    case 116: a("Infineon C16x/XC16x,")
    case 117: a("Renesas M16C series,")
    case 118: a("Microchip dsPIC30F,")
    case 119: a("Freescale RISC core,")
    case 120: a("Renesas M32C series,")
    case 131: a("Altium TSK3000 core,")
    case 132: a("Freescale RS08,")
    case 134: a("Cyan Technology eCOG2,")
    case 135: a("Sunplus S+core7 RISC,")
    case 136: a("New Japan Radio (NJR) 24-bit DSP,")
    case 137: a("Broadcom VideoCore III,")
    case 138: a("LatticeMico32,")
    case 139: a("Seiko Epson C17 family,")
    case 140: a("TI TMS320C6000 DSP family,")
    case 141: a("TI TMS320C2000 DSP family,")
    case 142: a("TI TMS320C55x DSP family,")
    case 160: a("STMicroelectronics 64bit VLIW DSP,")
    case 161: a("Cypress M8C,")
    case 162: a("Renesas R32C series,")
    case 163: a("NXP TriMedia family,")
    case 164: a("QUALCOMM DSP6,")
    case 165: a("Intel 8051 and variants,")
    case 166: a("STMicroelectronics STxP7x family,")
    case 167: a("Andes embedded RISC,")
    case 168: a("Cyan eCOG1X family,")
    case 169: a("Dallas MAXQ30,")
    case 170: a("New Japan Radio (NJR) 16-bit DSP,")
    case 171: a("M2000 Reconfigurable RISC,")
    case 172: a("Cray NV2 vector architecture,")
    case 173: a("Renesas RX family,")
    case 174: a("META,")
    case 175: a("MCST Elbrus,")
    case 176: a("Cyan Technology eCOG16 family,")
    case 177: a("NatSemi CompactRISC,")
    case 178: a("Freescale Extended Time Processing Unit,")
    case 179: a("Infineon SLE9X,")
    case 180: a("Intel L1OM,")
    case 181: a("Intel K1OM,")
    case 183: a("ARM aarch64,")
    case 185: a("Atmel 32-bit family,")
    case 186: a("STMicroeletronics STM8 8-bit,")
    case 187: a("Tilera TILE64,")
    case 188: a("Tilera TILEPro,")
    case 189: a("Xilinx MicroBlaze 32-bit RISC,")
    case 190: a("NVIDIA CUDA architecture,")
    case 191: a("Tilera TILE-Gx,")
    case 197: a("Renesas RL78 family,")
    case 199: a("Renesas 78K0R,")
    case 4183: a("AVR (unofficial),")
    case 4185: a("MSP430 (unofficial),")
    case 4643: a("Adapteva Epiphany (unofficial),")
    case 9520: a("Morpho MT (unofficial),")
    case 13104: a("FR30 (unofficial),")
    case 13350: a("OpenRISC (obsolete),")
    case 18056: a("Infineon C166 (unofficial),")
    case 21569: a("Cygnus FRV (unofficial),")
    case 23205: a("DLX (unofficial),")
    case 30288: a("Cygnus D10V (unofficial),")
    case 30326: a("Cygnus D30V (unofficial),")
    case 33303: a("Ubicom IP2xxx (unofficial),")
    case 33906: a("OpenRISC (obsolete),")
    case 36901: a("Cygnus PowerPC (unofficial),")
    case 36902: a("Alpha (unofficial),")
    case 36929: a("Cygnus M32R (unofficial),")
    case 36992: a("Cygnus V850 (unofficial),")
    case 41872: a("IBM S/390 (obsolete),")
    case 43975: a("Old Xtensa (unofficial),")
    case 44357: a("xstormy16 (unofficial),")
    case 47787: a("Old MicroBlaze (unofficial),,")
    case 48879: a("Cygnus MN10300 (unofficial),")
    case 57005: a("Cygnus MN10200 (unofficial),")
    case 61453: a("Toshiba MeP (unofficial),")
    case 65200: a("Renesas M32C (unofficial),")
    case 65210: a("Vitesse IQ2000 (unofficial),")
    case 65211: a("NIOS (unofficial),")
    case 65261: a("Moxie (unofficial),")
    default: {goto f5c}
  }
  d[0]=t
f5c:
  if d[0] {goto ff0}
  a("*unknown arch 0x%x*")
  d[0]=t
ff0:
  rc,m=f4l(r,s,po+20)
  switch rc {
    case 0: a("invalid version")
    case 1: a("version 1")
    default: {goto ff2}
  }
  d[0]=t
ff2:
  return out
}

func IdentifyElfLe__Swapped(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  d[0]=f
  rc,m=f2b(r,s,po+16)
  switch rc {
    case 0: a("no file type,")
    case 1: a("relocatable,")
    case 2: a("executable,")
    case 3: a("shared object,")
    case 4: a("core file")
    default: {goto f1}
  }
  d[0]=t
f1:
  rc,m=f2b(r,s,po+16)
  if !(m&&rc==65280) {goto f6}
  a("processor-specific,")
  d[0]=t
f6:
  d[0]=f
  d[0]=t
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 0: a("no machine,")
    case 1: a("AT&T WE32100,")
    case 2: a("SPARC,")
    case 3: a("Intel 80386,")
    default: {goto f8}
  }
  d[0]=t
f8:
  rc,m=f2b(r,s,po+18)
  if !(m&&rc==4) {goto fc}
  a("Motorola m68k,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto fd}
  rc,m=f4b(r,s,po+36)
  if !(m&&rc==16777216) {goto fe}
  a("68000,")
fe:
  if !(m&&rc==8454144) {goto ff}
  a("CPU32,")
ff:
  if !(m&&rc==0) {goto f10}
  a("68020,")
f10:
fd:
  d[0]=t
fc:
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 5: a("Motorola m88k,")
    case 6: a("Intel 80486,")
    case 7: a("Intel 80860,")
    default: {goto f11}
  }
  d[0]=t
f11:
  rc,m=f2b(r,s,po+18)
  if !(m&&rc==8) {goto f14}
  a("MIPS,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto f15}
  rc,m=f4b(r,s,po+36)
  if !(m&&rc==32) {goto f16}
  a("N32")
f16:
f15:
  d[0]=t
f14:
  if !(m&&rc==10) {goto f17}
  a("MIPS,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto f18}
  rc,m=f4b(r,s,po+36)
  if !(m&&rc==32) {goto f19}
  a("N32")
f19:
f18:
  d[0]=t
f17:
  if !(m&&rc==8) {goto f1a}
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto f1b}
  rc,m=f4b(r,s,po+36)
  if !(m&&rc&4026531840==0) {goto f1c}
  a("MIPS-I")
f1c:
  if !(m&&rc&4026531840==268435456) {goto f1d}
  a("MIPS-II")
f1d:
  if !(m&&rc&4026531840==536870912) {goto f1e}
  a("MIPS-III")
f1e:
  if !(m&&rc&4026531840==805306368) {goto f1f}
  a("MIPS-IV")
f1f:
  if !(m&&rc&4026531840==1073741824) {goto f20}
  a("MIPS-V")
f20:
  if !(m&&rc&4026531840==1342177280) {goto f21}
  a("MIPS32")
f21:
  if !(m&&rc&4026531840==1610612736) {goto f22}
  a("MIPS64")
f22:
  if !(m&&rc&4026531840==1879048192) {goto f23}
  a("MIPS32 rel2")
f23:
  if !(m&&rc&4026531840==2147483648) {goto f24}
  a("MIPS64 rel2")
f24:
f1b:
  if !(m&&rc==2) {goto f25}
  rc,m=f4b(r,s,po+48)
  if !(m&&rc&4026531840==0) {goto f26}
  a("MIPS-I")
f26:
  if !(m&&rc&4026531840==268435456) {goto f27}
  a("MIPS-II")
f27:
  if !(m&&rc&4026531840==536870912) {goto f28}
  a("MIPS-III")
f28:
  if !(m&&rc&4026531840==805306368) {goto f29}
  a("MIPS-IV")
f29:
  if !(m&&rc&4026531840==1073741824) {goto f2a}
  a("MIPS-V")
f2a:
  if !(m&&rc&4026531840==1342177280) {goto f2b}
  a("MIPS32")
f2b:
  if !(m&&rc&4026531840==1610612736) {goto f2c}
  a("MIPS64")
f2c:
  if !(m&&rc&4026531840==1879048192) {goto f2d}
  a("MIPS32 rel2")
f2d:
  if !(m&&rc&4026531840==2147483648) {goto f2e}
  a("MIPS64 rel2")
f2e:
f25:
  d[0]=t
f1a:
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 9: a("Amdahl,")
    case 10: a("MIPS (deprecated),")
    case 11: a("RS6000,")
    default: {goto f2f}
  }
  d[0]=t
f2f:
  rc,m=f2b(r,s,po+18)
  if !(m&&rc==15) {goto f32}
  a("PA-RISC,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto f33}
  rc,m=f2b(r,s,po+38)
  if !(m&&rc==532) {goto f34}
  a("2.0")
f34:
  rc,m=f2b(r,s,po+36)
  if !(m&&rc==8) {goto f35}
  a("(LP64)")
f35:
f33:
  if !(m&&rc==2) {goto f36}
  rc,m=f2b(r,s,po+50)
  if !(m&&rc==532) {goto f37}
  a("2.0")
f37:
  rc,m=f2b(r,s,po+48)
  if !(m&&rc==8) {goto f38}
  a("(LP64)")
f38:
f36:
  d[0]=t
f32:
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 16: a("nCUBE,")
    case 17: a("Fujitsu VPP500,")
    default: {goto f39}
  }
  d[0]=t
f39:
  rc,m=f2b(r,s,po+18)
  if !(m&&rc==18) {goto f3b}
  a("SPARC32PLUS,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto f3c}
  rc,m=f4b(r,s,po+36)
  if !(m&&rc&16776960==256) {goto f3d}
  a("V8+ Required,")
f3d:
  if !(m&&rc&16776960==512) {goto f3e}
  a("Sun UltraSPARC1 Extensions Required,")
f3e:
  if !(m&&rc&16776960==1024) {goto f3f}
  a("HaL R1 Extensions Required,")
f3f:
  if !(m&&rc&16776960==2048) {goto f40}
  a("Sun UltraSPARC3 Extensions Required,")
f40:
f3c:
  d[0]=t
f3b:
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 19: a("Intel 80960,")
    case 20: a("PowerPC or cisco 4500,")
    case 21: a("64-bit PowerPC or cisco 7500,")
    case 22: a("IBM S/390,")
    case 23: a("Cell SPU,")
    case 24: a("cisco SVIP,")
    case 25: a("cisco 7200,")
    case 36: a("NEC V800 or cisco 12000,")
    case 37: a("Fujitsu FR20,")
    case 38: a("TRW RH-32,")
    case 39: a("Motorola RCE,")
    default: {goto f41}
  }
  d[0]=t
f41:
  rc,m=f2b(r,s,po+18)
  if !(m&&rc==40) {goto f4c}
  a("ARM,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==1) {goto f4d}
  rc,m=f4b(r,s,po+36)
  if !(m&&rc&4278190080==67108864) {goto f4e}
  a("EABI4")
f4e:
  if !(m&&rc&4278190080==83886080) {goto f4f}
  a("EABI5")
f4f:
  if !(m&&rc==8388608) {goto f50}
  a("BE8")
f50:
  if !(m&&rc==4194304) {goto f51}
  a("LE8")
f51:
f4d:
  d[0]=t
f4c:
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 41: a("Alpha,")
    case 42: a("Renesas SH,")
    default: {goto f52}
  }
  d[0]=t
f52:
  rc,m=f2b(r,s,po+18)
  if !(m&&rc==43) {goto f54}
  a("SPARC V9,")
  rc,m=f1b(r,s,po+4)
  if !(m&&rc==2) {goto f55}
  rc,m=f4b(r,s,po+48)
  if !(m&&rc&16776960==512) {goto f56}
  a("Sun UltraSPARC1 Extensions Required,")
f56:
  if !(m&&rc&16776960==1024) {goto f57}
  a("HaL R1 Extensions Required,")
f57:
  if !(m&&rc&16776960==2048) {goto f58}
  a("Sun UltraSPARC3 Extensions Required,")
f58:
  if !(m&&rc&3==0) {goto f59}
  a("total store ordering,")
f59:
  if !(m&&rc&3==1) {goto f5a}
  a("partial store ordering,")
f5a:
  if !(m&&rc&3==2) {goto f5b}
  a("relaxed memory ordering,")
f5b:
f55:
  d[0]=t
f54:
  rc,m=f2b(r,s,po+18)
  switch rc {
    case 44: a("Siemens Tricore Embedded Processor,")
    case 45: a("Argonaut RISC Core, Argonaut Technologies Inc.,")
    case 46: a("Renesas H8/300,")
    case 47: a("Renesas H8/300H,")
    case 48: a("Renesas H8S,")
    case 49: a("Renesas H8/500,")
    case 50: a("IA-64,")
    case 51: a("Stanford MIPS-X,")
    case 52: a("Motorola Coldfire,")
    case 53: a("Motorola M68HC12,")
    case 54: a("Fujitsu MMA,")
    case 55: a("Siemens PCP,")
    case 56: a("Sony nCPU,")
    case 57: a("Denso NDR1,")
    case 58: a("Start*Core,")
    case 59: a("Toyota ME16,")
    case 60: a("ST100,")
    case 61: a("Tinyj emb.,")
    case 62: a("x86-64,")
    case 63: a("Sony DSP,")
    case 64: a("DEC PDP-10,")
    case 65: a("DEC PDP-11,")
    case 66: a("FX66,")
    case 67: a("ST9+ 8/16 bit,")
    case 68: a("ST7 8 bit,")
    case 69: a("MC68HC16,")
    case 70: a("MC68HC11,")
    case 71: a("MC68HC08,")
    case 72: a("MC68HC05,")
    case 73: a("SGI SVx or Cray NV1,")
    case 74: a("ST19 8 bit,")
    case 75: a("Digital VAX,")
    case 76: a("Axis cris,")
    case 77: a("Infineon 32-bit embedded,")
    case 78: a("Element 14 64-bit DSP,")
    case 79: a("LSI Logic 16-bit DSP,")
    case 80: a("MMIX,")
    case 81: a("Harvard machine-independent,")
    case 82: a("SiTera Prism,")
    case 83: a("Atmel AVR 8-bit,")
    case 84: a("Fujitsu FR30,")
    case 85: a("Mitsubishi D10V,")
    case 86: a("Mitsubishi D30V,")
    case 87: a("NEC v850,")
    case 88: a("Renesas M32R,")
    case 89: a("Matsushita MN10300,")
    case 90: a("Matsushita MN10200,")
    case 91: a("picoJava,")
    case 92: a("OpenRISC,")
    case 93: a("ARC Cores Tangent-A5,")
    case 94: a("Tensilica Xtensa,")
    case 95: a("Alphamosaic VideoCore,")
    case 96: a("Thompson Multimedia,")
    case 97: a("NatSemi 32k,")
    case 98: a("Tenor Network TPC,")
    case 99: a("Trebia SNP 1000,")
    case 100: a("STMicroelectronics ST200,")
    case 101: a("Ubicom IP2022,")
    case 102: a("MAX Processor,")
    case 103: a("NatSemi CompactRISC,")
    case 104: a("Fujitsu F2MC16,")
    case 105: a("TI msp430,")
    case 106: a("Analog Devices Blackfin,")
    case 107: a("S1C33 Family of Seiko Epson,")
    case 108: a("Sharp embedded,")
    case 109: a("Arca RISC,")
    case 110: a("PKU-Unity Ltd.,")
    case 111: a("eXcess: 16/32/64-bit,")
    case 112: a("Icera Deep Execution Processor,")
    case 113: a("Altera Nios II,")
    case 114: a("NatSemi CRX,")
    case 115: a("Motorola XGATE,")
    case 116: a("Infineon C16x/XC16x,")
    case 117: a("Renesas M16C series,")
    case 118: a("Microchip dsPIC30F,")
    case 119: a("Freescale RISC core,")
    case 120: a("Renesas M32C series,")
    case 131: a("Altium TSK3000 core,")
    case 132: a("Freescale RS08,")
    case 134: a("Cyan Technology eCOG2,")
    case 135: a("Sunplus S+core7 RISC,")
    case 136: a("New Japan Radio (NJR) 24-bit DSP,")
    case 137: a("Broadcom VideoCore III,")
    case 138: a("LatticeMico32,")
    case 139: a("Seiko Epson C17 family,")
    case 140: a("TI TMS320C6000 DSP family,")
    case 141: a("TI TMS320C2000 DSP family,")
    case 142: a("TI TMS320C55x DSP family,")
    case 160: a("STMicroelectronics 64bit VLIW DSP,")
    case 161: a("Cypress M8C,")
    case 162: a("Renesas R32C series,")
    case 163: a("NXP TriMedia family,")
    case 164: a("QUALCOMM DSP6,")
    case 165: a("Intel 8051 and variants,")
    case 166: a("STMicroelectronics STxP7x family,")
    case 167: a("Andes embedded RISC,")
    case 168: a("Cyan eCOG1X family,")
    case 169: a("Dallas MAXQ30,")
    case 170: a("New Japan Radio (NJR) 16-bit DSP,")
    case 171: a("M2000 Reconfigurable RISC,")
    case 172: a("Cray NV2 vector architecture,")
    case 173: a("Renesas RX family,")
    case 174: a("META,")
    case 175: a("MCST Elbrus,")
    case 176: a("Cyan Technology eCOG16 family,")
    case 177: a("NatSemi CompactRISC,")
    case 178: a("Freescale Extended Time Processing Unit,")
    case 179: a("Infineon SLE9X,")
    case 180: a("Intel L1OM,")
    case 181: a("Intel K1OM,")
    case 183: a("ARM aarch64,")
    case 185: a("Atmel 32-bit family,")
    case 186: a("STMicroeletronics STM8 8-bit,")
    case 187: a("Tilera TILE64,")
    case 188: a("Tilera TILEPro,")
    case 189: a("Xilinx MicroBlaze 32-bit RISC,")
    case 190: a("NVIDIA CUDA architecture,")
    case 191: a("Tilera TILE-Gx,")
    case 197: a("Renesas RL78 family,")
    case 199: a("Renesas 78K0R,")
    case 4183: a("AVR (unofficial),")
    case 4185: a("MSP430 (unofficial),")
    case 4643: a("Adapteva Epiphany (unofficial),")
    case 9520: a("Morpho MT (unofficial),")
    case 13104: a("FR30 (unofficial),")
    case 13350: a("OpenRISC (obsolete),")
    case 18056: a("Infineon C166 (unofficial),")
    case 21569: a("Cygnus FRV (unofficial),")
    case 23205: a("DLX (unofficial),")
    case 30288: a("Cygnus D10V (unofficial),")
    case 30326: a("Cygnus D30V (unofficial),")
    case 33303: a("Ubicom IP2xxx (unofficial),")
    case 33906: a("OpenRISC (obsolete),")
    case 36901: a("Cygnus PowerPC (unofficial),")
    case 36902: a("Alpha (unofficial),")
    case 36929: a("Cygnus M32R (unofficial),")
    case 36992: a("Cygnus V850 (unofficial),")
    case 41872: a("IBM S/390 (obsolete),")
    case 43975: a("Old Xtensa (unofficial),")
    case 44357: a("xstormy16 (unofficial),")
    case 47787: a("Old MicroBlaze (unofficial),,")
    case 48879: a("Cygnus MN10300 (unofficial),")
    case 57005: a("Cygnus MN10200 (unofficial),")
    case 61453: a("Toshiba MeP (unofficial),")
    case 65200: a("Renesas M32C (unofficial),")
    case 65210: a("Vitesse IQ2000 (unofficial),")
    case 65211: a("NIOS (unofficial),")
    case 65261: a("Moxie (unofficial),")
    default: {goto f5c}
  }
  d[0]=t
f5c:
  if d[0] {goto ff0}
  a("*unknown arch 0x%x*")
  d[0]=t
ff0:
  rc,m=f4b(r,s,po+20)
  switch rc {
    case 0: a("invalid version")
    case 1: a("version 1")
    default: {goto ff2}
  }
  d[0]=t
ff2:
  return out
}

func IdentifyIcoEntry(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  a(IdentifyCurIcoEntry(r,s,po)...)
  rc,m=f2l(r,s,po+4)
  if !(m&&rc>1) {goto f2}
  a("\\b, %d planes")
f2:
  rc,m=f2l(r,s,po+6)
  if !(m&&rc>1) {goto f3}
  a("\\b, %d bits/pixel")
f3:
  return out
}

func IdentifyLotusCells(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f4b(r,s,po)
  if !(m&&rc==100665344) {goto f1}
  a("\\b, cell range")
  rc,m=f4l(r,s,po+4)
  if !(m&&rc!=0) {goto f2}
  a("\\b%d,")
  a("\\b%d-")
f2:
  a("\\b%d,")
  a("\\b%d")
f1:
  return out
}

func IdentifyMachO(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  a("\\b [")
  a(IdentifyMachOCpu(r,s,po)...)
  a("\\b")
  a("\\b]")
  return out
}

func IdentifyMachOBe(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f1l(r,s,po)
  if !(m&&rc==207) {goto f1}
  a("64-bit")
f1:
  a(IdentifyMachOCpu(r,s,po+4)...)
  rc,m=f4b(r,s,po+12)
  switch rc {
    case 1: a("object")
    case 2: a("executable")
    case 3: a("fixed virtual memory shared library")
    case 4: a("core")
    case 5: a("preload executable")
    case 6: a("dynamically linked shared library")
    case 7: a("dynamic linker")
    case 8: a("bundle")
    case 9: a("dynamically linked shared library stub")
    case 10: a("dSYM companion file")
    case 11: a("kext bundle")
    default: {goto f3}
  }
f3:
  rc,m=f4b(r,s,po+12)
  if !(m&&int64(int32(rc))>11) {goto fe}
  a("filetype=%ld")
fe:
  return out
}

func IdentifyMachOBe__Swapped(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f1b(r,s,po)
  if !(m&&rc==207) {goto f1}
  a("64-bit")
f1:
  a(IdentifyMachOCpu(r,s,po+4)...)
  rc,m=f4l(r,s,po+12)
  switch rc {
    case 1: a("object")
    case 2: a("executable")
    case 3: a("fixed virtual memory shared library")
    case 4: a("core")
    case 5: a("preload executable")
    case 6: a("dynamically linked shared library")
    case 7: a("dynamic linker")
    case 8: a("bundle")
    case 9: a("dynamically linked shared library stub")
    case 10: a("dSYM companion file")
    case 11: a("kext bundle")
    default: {goto f3}
  }
f3:
  rc,m=f4l(r,s,po+12)
  if !(m&&int64(int32(rc))>11) {goto fe}
  a("filetype=%ld")
fe:
  return out
}

func IdentifyMachOCpu(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  rc,m=f4b(r,s,po)
  if !(m&&rc&16777216==0) {goto f1}
  if !(m&&rc&16777215==1) {goto f2}
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f3}
  a("vax")
f3:
  if !(m&&rc&16777215==1) {goto f4}
  a("vax11/780")
f4:
  if !(m&&rc&16777215==2) {goto f5}
  a("vax11/785")
f5:
  if !(m&&rc&16777215==3) {goto f6}
  a("vax11/750")
f6:
  if !(m&&rc&16777215==4) {goto f7}
  a("vax11/730")
f7:
  if !(m&&rc&16777215==5) {goto f8}
  a("uvaxI")
f8:
  if !(m&&rc&16777215==6) {goto f9}
  a("uvaxII")
f9:
  if !(m&&rc&16777215==7) {goto fa}
  a("vax8200")
fa:
  if !(m&&rc&16777215==8) {goto fb}
  a("vax8500")
fb:
  if !(m&&rc&16777215==9) {goto fc}
  a("vax8600")
fc:
  if !(m&&rc&16777215==10) {goto fd}
  a("vax8650")
fd:
  if !(m&&rc&16777215==11) {goto fe}
  a("vax8800")
fe:
  if !(m&&rc&16777215==12) {goto ff}
  a("uvaxIII")
ff:
  if !(m&&int64(int32(rc))&16777215>12) {goto f10}
  a("vax subarchitecture=%ld")
f10:
f2:
  if !(m&&rc&16777215==2) {goto f11}
  a("romp")
f11:
  if !(m&&rc&16777215==3) {goto f12}
  a("architecture=3")
f12:
  if !(m&&rc&16777215==4) {goto f13}
  a("ns32032")
f13:
  if !(m&&rc&16777215==5) {goto f14}
  a("ns32332")
f14:
  if !(m&&rc&16777215==6) {goto f15}
  a("m68k")
f15:
  if !(m&&rc&16777215==7) {goto f16}
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&15==3) {goto f17}
  a("i386")
f17:
  if !(m&&rc&15==4) {goto f18}
  a("i486")
  if !(m&&rc&16777200==0) {goto f19}
f19:
  if !(m&&rc&16777200==128) {goto f1a}
  a("\\bsx")
f1a:
f18:
  if !(m&&rc&15==5) {goto f1b}
  a("i586")
f1b:
  if !(m&&rc&15==6) {goto f1c}
  if !(m&&rc&16777200==0) {goto f1d}
  a("p6")
f1d:
  if !(m&&rc&16777200==16) {goto f1e}
  a("pentium_pro")
f1e:
  if !(m&&rc&16777200==32) {goto f1f}
  a("pentium_2_m0x20")
f1f:
  if !(m&&rc&16777200==48) {goto f20}
  a("pentium_2_m3")
f20:
  if !(m&&rc&16777200==64) {goto f21}
  a("pentium_2_m0x40")
f21:
  if !(m&&rc&16777200==80) {goto f22}
  a("pentium_2_m5")
f22:
  if !(m&&int64(int32(rc))&16777200>80) {goto f23}
  a("pentium_2_m0x%lx")
f23:
f1c:
  if !(m&&rc&15==7) {goto f24}
  a("celeron")
  if !(m&&rc&16777200==0) {goto f25}
  a("\\b_m0x%lx")
f25:
  if !(m&&rc&16777200==16) {goto f26}
  a("\\b_m0x%lx")
f26:
  if !(m&&rc&16777200==32) {goto f27}
  a("\\b_m0x%lx")
f27:
  if !(m&&rc&16777200==48) {goto f28}
  a("\\b_m0x%lx")
f28:
  if !(m&&rc&16777200==64) {goto f29}
  a("\\b_m0x%lx")
f29:
  if !(m&&rc&16777200==80) {goto f2a}
  a("\\b_m0x%lx")
f2a:
  if !(m&&rc&16777200==96) {goto f2b}
f2b:
  if !(m&&rc&16777200==112) {goto f2c}
  a("\\b_mobile")
f2c:
  if !(m&&int64(int32(rc))&16777200>112) {goto f2d}
  a("\\b_m0x%lx")
f2d:
f24:
  if !(m&&rc&15==8) {goto f2e}
  a("pentium_3")
  if !(m&&rc&16777200==0) {goto f2f}
f2f:
  if !(m&&rc&16777200==16) {goto f30}
  a("\\b_m")
f30:
  if !(m&&rc&16777200==32) {goto f31}
  a("\\b_xeon")
f31:
  if !(m&&int64(int32(rc))&16777200>32) {goto f32}
  a("\\b_m0x%lx")
f32:
f2e:
  if !(m&&rc&15==9) {goto f33}
  a("pentiumM")
  if !(m&&rc&16777200==0) {goto f34}
f34:
  if !(m&&int64(int32(rc))&16777200>0) {goto f35}
  a("\\b_m0x%lx")
f35:
f33:
  if !(m&&rc&15==10) {goto f36}
  a("pentium_4")
  if !(m&&rc&16777200==0) {goto f37}
f37:
  if !(m&&rc&16777200==16) {goto f38}
  a("\\b_m")
f38:
  if !(m&&int64(int32(rc))&16777200>16) {goto f39}
  a("\\b_m0x%lx")
f39:
f36:
  if !(m&&rc&15==11) {goto f3a}
  a("itanium")
  if !(m&&rc&16777200==0) {goto f3b}
f3b:
  if !(m&&rc&16777200==16) {goto f3c}
  a("\\b_2")
f3c:
  if !(m&&int64(int32(rc))&16777200>16) {goto f3d}
  a("\\b_m0x%lx")
f3d:
f3a:
  if !(m&&rc&15==12) {goto f3e}
  a("xeon")
  if !(m&&rc&16777200==0) {goto f3f}
f3f:
  if !(m&&rc&16777200==16) {goto f40}
  a("\\b_mp")
f40:
  if !(m&&int64(int32(rc))&16777200>16) {goto f41}
  a("\\b_m0x%lx")
f41:
f3e:
  if !(m&&int64(int32(rc))&15>12) {goto f42}
  a("ia32 family=%ld")
  if !(m&&rc&16777200==0) {goto f43}
f43:
  if !(m&&int64(int32(rc))&16777200>0) {goto f44}
  a("model=%lx")
f44:
f42:
f16:
  if !(m&&rc&16777215==8) {goto f45}
  a("mips")
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==1) {goto f46}
  a("R2300")
f46:
  if !(m&&rc&16777215==2) {goto f47}
  a("R2600")
f47:
  if !(m&&rc&16777215==3) {goto f48}
  a("R2800")
f48:
  if !(m&&rc&16777215==4) {goto f49}
  a("R2000a")
f49:
  if !(m&&rc&16777215==5) {goto f4a}
  a("R2000")
f4a:
  if !(m&&rc&16777215==6) {goto f4b}
  a("R3000a")
f4b:
  if !(m&&rc&16777215==7) {goto f4c}
  a("R3000")
f4c:
  if !(m&&int64(int32(rc))&16777215>7) {goto f4d}
  a("subarchitecture=%ld")
f4d:
f45:
  if !(m&&rc&16777215==9) {goto f4e}
  a("ns32532")
f4e:
  if !(m&&rc&16777215==10) {goto f4f}
  a("mc98000")
f4f:
  if !(m&&rc&16777215==11) {goto f50}
  a("hppa")
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f51}
  a("7100")
f51:
  if !(m&&rc&16777215==1) {goto f52}
  a("7100LC")
f52:
  if !(m&&int64(int32(rc))&16777215>1) {goto f53}
  a("subarchitecture=%ld")
f53:
f50:
  if !(m&&rc&16777215==12) {goto f54}
  a("arm")
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f55}
f55:
  if !(m&&rc&16777215==1) {goto f56}
  a("subarchitecture=%ld")
f56:
  if !(m&&rc&16777215==2) {goto f57}
  a("subarchitecture=%ld")
f57:
  if !(m&&rc&16777215==3) {goto f58}
  a("subarchitecture=%ld")
f58:
  if !(m&&rc&16777215==4) {goto f59}
  a("subarchitecture=%ld")
f59:
  if !(m&&rc&16777215==5) {goto f5a}
  a("\\b_v4t")
f5a:
  if !(m&&rc&16777215==6) {goto f5b}
  a("\\b_v6")
f5b:
  if !(m&&rc&16777215==7) {goto f5c}
  a("\\b_v5tej")
f5c:
  if !(m&&rc&16777215==8) {goto f5d}
  a("\\b_xscale")
f5d:
  if !(m&&rc&16777215==9) {goto f5e}
  a("\\b_v7")
f5e:
  if !(m&&rc&16777215==10) {goto f5f}
  a("\\b_v7f")
f5f:
  if !(m&&rc&16777215==11) {goto f60}
  a("subarchitecture=%ld")
f60:
  if !(m&&rc&16777215==12) {goto f61}
  a("\\b_v7k")
f61:
  if !(m&&int64(int32(rc))&16777215>12) {goto f62}
  a("subarchitecture=%ld")
f62:
f54:
  if !(m&&rc&16777215==13) {goto f63}
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f64}
  a("mc88000")
f64:
  if !(m&&rc&16777215==1) {goto f65}
  a("mc88100")
f65:
  if !(m&&rc&16777215==2) {goto f66}
  a("mc88110")
f66:
  if !(m&&int64(int32(rc))&16777215>2) {goto f67}
  a("mc88000 subarchitecture=%ld")
f67:
f63:
  if !(m&&rc&16777215==14) {goto f68}
  a("sparc")
f68:
  if !(m&&rc&16777215==15) {goto f69}
  a("i860g")
f69:
  if !(m&&rc&16777215==16) {goto f6a}
  a("alpha")
f6a:
  if !(m&&rc&16777215==17) {goto f6b}
  a("rs6000")
f6b:
  if !(m&&rc&16777215==18) {goto f6c}
  a("ppc")
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f6d}
f6d:
  if !(m&&rc&16777215==1) {goto f6e}
  a("\\b_601")
f6e:
  if !(m&&rc&16777215==2) {goto f6f}
  a("\\b_602")
f6f:
  if !(m&&rc&16777215==3) {goto f70}
  a("\\b_603")
f70:
  if !(m&&rc&16777215==4) {goto f71}
  a("\\b_603e")
f71:
  if !(m&&rc&16777215==5) {goto f72}
  a("\\b_603ev")
f72:
  if !(m&&rc&16777215==6) {goto f73}
  a("\\b_604")
f73:
  if !(m&&rc&16777215==7) {goto f74}
  a("\\b_604e")
f74:
  if !(m&&rc&16777215==8) {goto f75}
  a("\\b_620")
f75:
  if !(m&&rc&16777215==9) {goto f76}
  a("\\b_650")
f76:
  if !(m&&rc&16777215==10) {goto f77}
  a("\\b_7400")
f77:
  if !(m&&rc&16777215==11) {goto f78}
  a("\\b_7450")
f78:
  if !(m&&rc&16777215==100) {goto f79}
  a("\\b_970")
f79:
  if !(m&&int64(int32(rc))&16777215>100) {goto f7a}
  a("subarchitecture=%ld")
f7a:
f6c:
  if !(m&&int64(int32(rc))&16777215>18) {goto f7b}
  a("architecture=%ld")
f7b:
f1:
  if !(m&&rc&16777216==16777216) {goto f7c}
  if !(m&&rc&16777215==0) {goto f7d}
  a("64-bit architecture=%ld")
f7d:
  if !(m&&rc&16777215==1) {goto f7e}
  a("64-bit architecture=%ld")
f7e:
  if !(m&&rc&16777215==2) {goto f7f}
  a("64-bit architecture=%ld")
f7f:
  if !(m&&rc&16777215==3) {goto f80}
  a("64-bit architecture=%ld")
f80:
  if !(m&&rc&16777215==4) {goto f81}
  a("64-bit architecture=%ld")
f81:
  if !(m&&rc&16777215==5) {goto f82}
  a("64-bit architecture=%ld")
f82:
  if !(m&&rc&16777215==6) {goto f83}
  a("64-bit architecture=%ld")
f83:
  if !(m&&rc&16777215==7) {goto f84}
  a("x86_64")
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f85}
  a("subarchitecture=%ld")
f85:
  if !(m&&rc&16777215==1) {goto f86}
  a("subarchitecture=%ld")
f86:
  if !(m&&rc&16777215==2) {goto f87}
  a("subarchitecture=%ld")
f87:
  if !(m&&rc&16777215==3) {goto f88}
f88:
  if !(m&&rc&16777215==4) {goto f89}
  a("\\b_arch1")
f89:
  if !(m&&int64(int32(rc))&16777215>4) {goto f8a}
  a("subarchitecture=%ld")
f8a:
f84:
  if !(m&&rc&16777215==8) {goto f8b}
  a("64-bit architecture=%ld")
f8b:
  if !(m&&rc&16777215==9) {goto f8c}
  a("64-bit architecture=%ld")
f8c:
  if !(m&&rc&16777215==10) {goto f8d}
  a("64-bit architecture=%ld")
f8d:
  if !(m&&rc&16777215==11) {goto f8e}
  a("64-bit architecture=%ld")
f8e:
  if !(m&&rc&16777215==12) {goto f8f}
  a("64-bit architecture=%ld")
f8f:
  if !(m&&rc&16777215==13) {goto f90}
  a("64-bit architecture=%ld")
f90:
  if !(m&&rc&16777215==14) {goto f91}
  a("64-bit architecture=%ld")
f91:
  if !(m&&rc&16777215==15) {goto f92}
  a("64-bit architecture=%ld")
f92:
  if !(m&&rc&16777215==16) {goto f93}
  a("64-bit architecture=%ld")
f93:
  if !(m&&rc&16777215==17) {goto f94}
  a("64-bit architecture=%ld")
f94:
  if !(m&&rc&16777215==18) {goto f95}
  a("ppc64")
  rc,m=f4b(r,s,po+4)
  if !(m&&rc&16777215==0) {goto f96}
f96:
  if !(m&&rc&16777215==1) {goto f97}
  a("\\b_601")
f97:
  if !(m&&rc&16777215==2) {goto f98}
  a("\\b_602")
f98:
  if !(m&&rc&16777215==3) {goto f99}
  a("\\b_603")
f99:
  if !(m&&rc&16777215==4) {goto f9a}
  a("\\b_603e")
f9a:
  if !(m&&rc&16777215==5) {goto f9b}
  a("\\b_603ev")
f9b:
  if !(m&&rc&16777215==6) {goto f9c}
  a("\\b_604")
f9c:
  if !(m&&rc&16777215==7) {goto f9d}
  a("\\b_604e")
f9d:
  if !(m&&rc&16777215==8) {goto f9e}
  a("\\b_620")
f9e:
  if !(m&&rc&16777215==9) {goto f9f}
  a("\\b_650")
f9f:
  if !(m&&rc&16777215==10) {goto fa0}
  a("\\b_7400")
fa0:
  if !(m&&rc&16777215==11) {goto fa1}
  a("\\b_7450")
fa1:
  if !(m&&rc&16777215==100) {goto fa2}
  a("\\b_970")
fa2:
  if !(m&&int64(int32(rc))&16777215>100) {goto fa3}
  a("subarchitecture=%ld")
fa3:
f95:
  if !(m&&int64(int32(rc))&16777215>18) {goto fa4}
  a("64-bit architecture=%ld")
fa4:
f7c:
  return out
}

func IdentifyMsdosCom(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  a("DOS executable (COM)")
  rA = gt(r,s,po+6,"SFX of LHarc",0)
  if rA<0 {goto f2}
  a("\\b, %s")
f2:
  rc,m=f2l(r,s,po+510)
  if !(m&&rc==43605) {goto f3}
  a("\\b, boot code")
f3:
  rA = gt(r,s,po+85,"UPX",0)
  if rA<0 {goto f4}
  a("\\b, UPX compressed")
f4:
  rA = gt(r,s,po+4," $ARX",0)
  if rA<0 {goto f5}
  a("\\b, ARX self-extracting archive")
f5:
  rA = gt(r,s,po+4," $LHarc",0)
  if rA<0 {goto f6}
  a("\\b, LHarc self-extracting archive")
f6:
  rA = gt(r,s,po+526,"SFX by LARC",0)
  if rA<0 {goto f7}
  a("\\b, LARC self-extracting archive")
f7:
  return out
}

func IdentifyMsdosDriver(r io.ReaderAt, s int64, po int64) []string {
  var out []string
  var ss []string; ss=ss[0:]
  var gf int64; gf&=gf
  var ra uint64; ra&=ra
  var rb uint64; rb&=rb
  var rc uint64; rc&=rc
  var rA int64; rA&=rA
  var k bool; k=!!k
  var l bool; l=!!l
  var m bool; m=!!m
  var d=make([]bool, 32); d[0]=!!d[0]

  a:=func (args... string) {
    out=append(out, args...)
  }
  a("DOS executable (")
  rA=ht(r,s,po+40,7,"UPX!")
  if rA<0 {goto f1}
  a("\\bUPX compressed")
f1:
  rc,m=f2l(r,s,po+4)
  if !(m&&rc&32768==0) {goto f2}
  a("\\bblock device driver")
f2:
  if !(m&&rc&32768==32768) {goto f3}
  a("\\b")
  if !(m&&rc&8==8) {goto f4}
  a("\\bclock")
f4:
  if !(m&&rc&16==16) {goto f5}
  a("\\bfast")
f5:
  if !(m&&rc&3>0) {goto f6}
  a("\\bstandard")
  if !(m&&rc&1==1) {goto f7}
  a("\\binput")
f7:
  if !(m&&rc&3==3) {goto f8}
  a("\\b/")
f8:
  if !(m&&rc&2==2) {goto f9}
  a("\\boutput")
f9:
f6:
  if !(m&&rc&32768==32768) {goto fa}
  a("\\bcharacter device driver")
fa:
f3:
  d[1]=f
  rA=ht(r,s,po+40,7,"UPX!")
  if rA<0 {goto fc}
  d[1]=t
fc:
  if d[1] {goto fd}
  rc,m=f1l(r,s,po+12)
  if !(m&&rc>46) {goto fe}
  a("\\b")
  rc,m=f1l(r,s,po+10)
  if !(m&&rc>32) {goto ff}
  if !(m&&rc!=46) {goto f10}
  if !(m&&rc!=42) {goto f11}
  a("\\b%c")
f11:
f10:
ff:
  rc,m=f1l(r,s,po+11)
  if !(m&&rc>32) {goto f12}
  if !(m&&rc!=46) {goto f13}
  a("\\b%c")
f13:
f12:
  rc,m=f1l(r,s,po+12)
  if !(m&&rc>32) {goto f14}
  if !(m&&rc!=57) {goto f15}
  if !(m&&rc!=46) {goto f16}
  a("\\b%c")
f16:
f15:
f14:
fe:
  rc,m=f1l(r,s,po+13)
  if !(m&&rc>32) {goto f17}
  if !(m&&rc!=46) {goto f18}
  a("\\b%c")
f18:
  rc,m=f1l(r,s,po+14)
  if !(m&&rc>32) {goto f19}
  if !(m&&rc!=46) {goto f1a}
  a("\\b%c")
f1a:
f19:
  rc,m=f1l(r,s,po+15)
  if !(m&&rc>32) {goto f1b}
  if !(m&&rc!=46) {goto f1c}
  a("\\b%c")
f1c:
f1b:
  rc,m=f1l(r,s,po+16)
  if !(m&&rc>32) {goto f1d}
  if !(m&&rc!=46) {goto f1e}
  if !(m&&rc< 203) {goto f1f}
  a("\\b%c")
f1f:
f1e:
f1d:
  rc,m=f1l(r,s,po+17)
  if !(m&&rc>32) {goto f20}
  if !(m&&rc!=46) {goto f21}
  if !(m&&rc< 144) {goto f22}
  a("\\b%c")
f22:
f21:
f20:
f17:
  rc,m=f1l(r,s,po+12)
  if !(m&&rc< 47) {goto f23}
  rA = gt(r,s,po+22,">.",0)
  if rA<0 {goto f24}
  a("%-.6s")
f24:
f23:
  d[1]=t
fd:
  rc,m=f2l(r,s,po+4)
  if !(m&&rc&32768==0) {goto f25}
  if !(m&&rc&2==2) {goto f26}
  a("\\b,32-bit sector-")
f26:
f25:
  if !(m&&rc&64==64) {goto f27}
  a("\\b,IOCTL-")
f27:
  if !(m&&rc&2048==2048) {goto f28}
  a("\\b,close media-")
f28:
  if !(m&&rc&32768==32768) {goto f29}
  if !(m&&rc&8192==8192) {goto f2a}
  a("\\b,until busy-")
f2a:
f29:
  if !(m&&rc&16384==16384) {goto f2b}
  a("\\b,control strings-")
f2b:
  if !(m&&rc&32768==32768) {goto f2c}
  if !(m&&rc&26688>0) {goto f2d}
  a("\\bsupport")
f2d:
f2c:
  if !(m&&rc&32768==0) {goto f2e}
  if !(m&&rc&18498>0) {goto f2f}
  a("\\bsupport")
f2f:
f2e:
  a("\\b)")
  return out
}

